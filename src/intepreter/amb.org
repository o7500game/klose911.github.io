#+TITLE: 非确定性计算
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil 

* 定义
_非确定计算_ 通过向解释器的求值模型中添加 *自动搜索* 功能来实现。例如： 
#+BEGIN_SRC scheme
  (define (prime-sum-pair list1 list2)
    (let ((a (an-element-of list1))
	  (b (an-element-of list2)))
      (require (prime? (+ a b)))
      (list a b)))
#+END_SRC

** 思想
+ 一个表达式可以有多个可能值。如 _an-element-of_ 可能返回作为其参数的表里的任何元素。求值这种表达式时，求值器自动选出一个值（可能是可以选的任一个值）并维持相关的轨迹：
   + 哪些元素选过
   + 哪些没选过
   + 保证不会重选
+ 如果后面的要求不满足，求值器会在有关的表里 *重新选择* ，直至求值成功；或者所有选择都已用完时 *求值失败* 

** 与流的比较
+ 流处理用 _惰性求值_ 来解耦潜在的流和流元素的实际产生时间之间的紧密联系，使得貌似整个流都存在，元素的产生没有时间顺序
+ 非确定性计算的表达式表示对 *一批可能世界的探索* ，每个世界由一串选择决定。求值器造成的假相： *时间能分叉* 。程序保存所有可能的执行历史，计算遇到死路时退回前面选择点转到另一分支

* amb求值器
我们的非确定性计算

