#+TITLE: 系统文件
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: stdio.html   
#+HTML_LINK_HOME: apue.html
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
有很多操作需要使用一些与系统有关的数据文件，例如，口令文件/etc/passwd和组文件/etc/group就是经常由多种程序使用的两个文件。用户每次登录入UNIX系统，以及每次执行ls -l命令时都要使用口令文件。对于这些数据文件的可移植函数是本章的主题。本章也包括了系统标识函数、时间和日期函数等

* passwd文件
UNIX口令文件包含了表6-1中所示的各字段，这些字段包含在<pwd.h>中定义的passwd结构中

#+CAPTION: /etc/passwd文件中的字段
#+ATTR_HTML: :border 1 :rules all :frame boader
| 说明                | struct passwd成员 | POSIX.1 |
| 用户名           | char *pw_name     |    •     |
| 加密口令        | char *pw_passwd   |         |
| 数值用户ID      | uid_t pw_uid      | •       |
| 数值组ID         | gid_t pw_gid      | •       |
| 注释字段        | char *pw_gecos    |         |
| 初始工作目录  | char *pw_dir      | •       |
| 初始shell       | char *pw_shell    | •       |


口令文件是/etc/passwd，这是是一个文本文件。每一行包含表6-1中所示的7个字段，字段之间用冒号相分隔

#+BEGIN_SRC sh
  $ cat /etc/passwd

  root:jheVopR58x9Fx:0:1:The superuser:/:/bin/sh
  nobody:*:65534:65534::/:
  stevens:3hKVD8R58r9Fx:224:20:Richard Stevens:/home/stevens:/bin/ksh
#+END_SRC

+ 通常有一个登录项，其用户名为root，其用户ID是0(超级用户)
+ 现代的Unix系统此文件往往不包含加密后的密码，而是存放在/etc/shadow中
+ 口令文件中的某些字段可能是空。如果密码口令字段为空，这通常就意味着该用户没有口令。nobody有两个空白字段：注释字段和初始shell字段。空白注释字段不产生任何影响。空白shell字段则表示取系统默认值，通常是/bin/bash
+ 支持finger(1)命令的某些UNIX系统支持注释字段中的附加信息。其中，各部分之间都用逗号分隔：用户姓名，办公室地点，办公室电话号码，家庭电话号码
+ 如果里面注册的某个用户只打算用于守护进程之类而不打算给予登录shell,应将其Home目录字段设置为/dev/null 或者/bin/false等

** getpwuid, getpwnam
+ getpwuid：根据用户id获取passwd记录
+ getpwnam：根据用户登录名获取passwd记录
#+BEGIN_SRC C
  #include <sys/types.h>
  #include <pwd.h>
  /**
     根据用户id获取passwd记录

     uid：用户id

     return：若成功则为指向passwd结构的指针，若出错则为NULL
  ,*/
  struct passwd *getpwuid(uid_t uid);

  /**
     根据用户登录名获取passwd记录

     name：用户登录名

     return：若成功则为指向passwd结构的指针，若出错则为NULL
  ,*/
  struct passwd *getpwnam(const char *name);
#+END_SRC
这两个函数都返回一个指向passwd结构的指针，该结构通常是在相关函数内的静态变量，只要调用相关函数，其内容就会被重写!

getpwuid由ls(1)程序使用，以便将包含在一个i节点中的数值用户ID映照为用户登录名。getpwnam在键入登录名时由login(1)程序使用

** getpwent,setpwent,endpwent
有些程序要查看整个口令文件。下列三个函数则可用于此：
- getpwent：返回passwd文件下一个记录项
- setpwent：重置getpwent的当前位置到最开始
- endpwent：关闭getpwent打开的文件
  #+BEGIN_SRC C
    #include <sys/types.h>
    #include <pwd.h>

    /**
       返回passwd文件下一个记录项

       return：若成功则为指向passwd结构的指针，若出错或到达文件尾端则为NULL
    ,*/
    struct passwd *getpwent(void);

    /**
       重置getpwent的当前位置到最开始
    ,*/
    void setpwent(void);

    /**
       关闭getpwent打开的文件
    ,*/
    void endpwent(void);
  #+END_SRC
在使用getpwent查看完口令文件后，一定要调用endpwent关闭这些文件。getpwent知道什么时间它应当打开它所使用的文件，但是它并不能知道何时关闭这些文件

*** getpwnam的简易实现
在开始处调用setpwent是保护性的措施，以便在调用者在此之前已经调用过getpwent的情况下，重置有关文件使它们定位到文件开始处。getpwnam和getpwuid完成后不应使有关文件仍处于打开状态，所以应调用endpwent关闭它们
    #+BEGIN_SRC C
      #include <sys/types.h>
      #include <pwd.h>
      #include <stddef.h>
      #include <string.h>

      static struct passwd *retrievePasswd(const char *name);

      int main(void) 
      {
              char name[] = "klose";
              struct passwd *ptr;
              ptr = retrievePasswd(name);

              if(NULL == ptr)
                      err_sys("error retrieve passwd entry");

              printf("work directory %s\n", ptr->pw_dir);
              printf("login shell  %s\n", ptr->pw_shell);

              exit(0);
              
      }

      struct passwd *retrievePasswd(const char *name)
      {
              struct passwd *ptr;
              setpwent();

              while((ptr = getpwent()) != NULL)
                      if(0 == strcmp(name, ptr->pw_name) )
                              break;

              endpwent();
              return ptr;
              
      }
    #+END_SRC

** shadow文件
某些系统将加密口令存放在另一个通常称为阴影口令shadow的文件中。该文件至少要包含用户名和加密口令。与该口令相关的其他信息也可存放在该文件中。例如，具有阴影口令的系统经常要求用户在一定时间间隔后选择一个新口令，这被称之为口令时效，选择新口令的时间间隔长度经常也存放在阴影口令文件中

阴影口令文件不应是一般用户可以读取的。仅有少数几个程序需要存取加密口令文件，例如login(1)和passwd(1)，这些程序常常设置-用户-ID为root。有了阴影口令后，普通口令文件/etc/passwd可由各用户自由读取

shadow文件相关接口：
#+BEGIN_SRC C
  #include <shadow.h>

  struct spwd *getspnam(const char *name);
  struct spwd *getspent(void);
  void setspent(void)
  void endspent(void);
#+END_SRC

* group文件
UNIX组文件包含了表6-2中所示字段，这些字段包含在<grp.h>中所定义的group结构中

#+CAPTION: /etc/group文件中的字段
#+ATTR_HTML: :border 1 :rules all :frame boader
| 说明                   | struct group成员 | POSIX.1 |
| 组名                 | char *gr_name    | •       |
| 加密口令           | char *gr_passwd  |         |
| 数字组ID            | int gr_gid       | •       |
| 指向各用户名指针的数组 | char **gr_mem    | •       |

字段gr_mem是一个指针数组，其中的指针各指向一个属于该组的用户名。该数组以null结尾
#+BEGIN_SRC sh
  $ cat /etc/group

  root:x:0:root
  bin:x:1:root,bin,daemon
  daemon:x:2:root,bin,daemon
  sys:x:3:root,bin,adm
  adm:x:4:root,adm,daemon
#+END_SRC

** getgrgid, getgrnam 
+ getgrgid：根据组id获取group记录
+ getgrnam：根据组名字获取group记录
   #+BEGIN_SRC C
     #include <sys/types.h>
     #include <grp.h>

     /**
        根据组id获取group记录

        gid：组id

        return：若成功则为指向group结构的指针，若出错则为NULL
     ,*/
     struct group *getgrgid(gid_t gid);


     /**
        根据组名字获取group记录

        name：组名字

        return：若成功则为指向group结构的指针，若出错则为NULL
     ,*/
     struct group *getgrnam(const char *name);
   #+END_SRC
如同对口令文件进行操作的函数一样,这两个函数通常也返回指向一个静态变量的指针,在每次调用时都重写该静态变量！

** getgrent, setgrent, endgrent
- getgrent：返回group文件下一个记录项
- setgrent：重置getgrent的当前位置到最开始
- endgrent：关闭getgrent打开的文件
   #+BEGIN_SRC C
     #include <sys/types.h>
     #include <grp.h>

     struct group *getgrent(void);
     void setgrent(void);
     void endgrent(void);
   #+END_SRC
调用getgrent后必须记得使用endgrent关闭！

** 附加组ID
现代的Unix系统一个用户一般可以属于多个组，以下函数用来支持这种特性：
- getgroups：读取当前进程所属用户附加组ID表
- setgroups：设置当前进程所属用户附加组ID表
- initgroups：初始化用户附加组ID表
#+BEGIN_SRC C
  #include <sys/types.h>
  #include <unistd.h>

  /**
     读取当前进程所属用户的附加组id表，并返回实际读取的附加组id数量

     gidsetsize：最多添加到grouplist的附加组数量，如果为0，则grouplist不做修改
     grouplist：附加组ID的数组

     return：若成功则为实际读取的附加组ID数量，若出错则为-1
  ,*/
  int getgroups(int gidsetsize, gid_t grouplist][);

  /**
     设置当前进程所属用户的附加组id表，并返回实际设置的附加组id数量

     ngroup：grouplist中的元素个数
     grouplist：要设置的附加组ID的数组

     return：成功返回0，失败返回-1
  ,*/
  int setgroups(int ngroups, const gid_t grouplist[]);

  /**
     初始化用户附加组id表

     username：用户登录名
     basegid：用户默认主组ID

     return：成功返回0，失败返回-1   
  ,*/
  int initgroups(const char *username, gid_t basegid);
#+END_SRC

* 其他数据文件
+ /etc/services：记录服务器网络服务
+ /etc/protocols：记录各种网络协议
+ /etc/networks：记录各种网卡信息
+ /etc/hosts：记录各种域名信息

** 操作函数
一般情况下每个数据文件至少有三个函数:
1. get函数：读下一个记录，如果需要还打开该文件。此种函数通常返回指向一个结构的指针。当已达到文件尾端时返回空指针。大多数get函数返回指向一个静态存储类结构的指针，如果要保存其内容，则需复制它
2. set函数：打开相应数据文件(如果尚末打开)，重置该文件到最初。如果希望在相应文件起始处开始处理，则调用此函数
3. end函数:关闭相应数据文件。在结束了对相应数据文件的读、写操作后，总应调用此函数以关闭所有相关文件 

另外，如果数据文件支持某种形式的关键字搜索，则也提供搜索具有指定关键字的记录的函数

#+CAPTION: 存取系统数据文件的一些函数
#+ATTR_HTML: :border 1 :rules all :frame boader
| 说明 | 数据文件 | 头文件 | 结构  | 附加的关键字搜索函数 |
|------+----------+--------+-------+----------------------|
| 口令 | /etc/passwd    | <pwd.h>  | passwd    | getpwnam,getpwuid               |
| 组  | /etc/group     | <grp.h>  | group     | getgrnam,getgrgid               |
|-----+----------------+----------+-----------+---------------------------------|
| 主机 | /etc/hosts     | <netdb.h> | hostent   | gethostbyname,gethostbyaddr     |
| 网络 | /etc/networks  | <netdb.h> | netent    | getnetbyname,getnetbyaddr       |
| 协议 | /etc/protocols | <netdb.h> | protoent  | getprotobyname,getprotobynumber |
| 服务 | /etc/services  | <netdb.h> | servent   | getservbyname,getservbyport     |

* 登录统计
大多数UNIX系统都提供下列两个数据文件：
1. utmp文件：记录当前登录进系统的各个用户，供who(1)程序使用
2. wtmp文件：跟踪各个登录和注销事件，供last(1)程序使用


utmp文件位于/var/run目录下，wtmp文件位于/var/log目录下
#+BEGIN_SRC sh
  $ ls -l /var/run/utmp 
  -rw-rw-r-- 1 root utmp 4608 Feb 22 22:28 /var/run/utmp

  $ ls -l /var/log/wtmp 
  -rw-rw-r-- 1 root utmp 20259072 Feb 22 22:28 /var/log/wtmp
#+END_SRC


** utmp结构
#+BEGIN_SRC C
  struct utmp
  {
          char ut_line[8]; /* tty line: "ttyh0", "ttyd0", "ttyp0", ... */
          char ut_name[8]; /* login name*/
          long ut_time; /* time since epoch */
  };
#+END_SRC
登录时login程序产生一个utmp结构，然后将其写入到utmp文件中，同时也将其添加到wtmp文件中。注销时init进程将utmp文件中相应的记录擦除(每个字节都填以0)，并将一个新记录添写到wtmp文件中。读wtmp文件中的该注销记录，其ut_name字段清除为0。在系统再启动时，以及更改系统时间和日期的前后，都在wtmp文件中添写特殊的记录项

* 系统标识
** uname
uname函数：返回与主机和操作系统有关的信息
#+BEGIN_SRC C
  #include <sys/utsname.h>
  /**
     与操作系统相关的信息读到指定的utsname结构指针中

     name：存放主机和操作系统相关信息的utsname结构指针

     return：若成功则为非负值，若出错则为-1
  ,*/
  int uname(stuct ustname *name);
#+END_SRC
通过参数向其传递一个utsname结构的指针，然后该函数填写此结构

*** utsname结构 
utsname结构至少包括以下字段：
- sysname：内核名，如Linux
- nodename：主机名，这个字段基本上没有意义
- release：发行名，如Ubuntu
- version：版本号，如2.6.24
- machine：体系结构，如i686
#+BEGIN_SRC C
  struct utsname
  {
          /* Name of the implementation of the operating system.  */
          char sysname[_UTSNAME_SYSNAME_LENGTH];

          /* Name of this node on the network.  */
          char nodename[_UTSNAME_NODENAME_LENGTH];

          /* Current release level of this implementation.  */
          char release[_UTSNAME_RELEASE_LENGTH];
          /* Current version level of this release.  */
          char version[_UTSNAME_VERSION_LENGTH];

          /* Name of the hardware type the system is running on.  */
          char machine[_UTSNAME_MACHINE_LENGTH];
          //...
  };
#+END_SRC
utsname结构中的信息通常可用uname(1)命令打印
#+BEGIN_SRC sh
  $ uname -a
  Linux gentoo 4.9.6-gentoo-r1 #1 SMP Sat Feb 4 17:28:48 CST 2017 x86_64 Intel(R) Core(TM) i3-2100 CPU @ 3.10GHz GenuineIntel GNU/Linux
#+END_SRC

** gethostname
gethostname：返回主机名，通常就是TCP/IP网络上主机的名字
#+BEGIN_SRC C
  #include  <unistd.h>

  /**
     返回主机名

     name：读取主机名到name字符串，字符串以null结尾
     namelen：数组长度

     return：若成功返回0，若失败返回-1
  ,*/
  int gethostname(char *name, int namelen);
#+END_SRC
<sys/param.h>中的常数MAXHOSTNAMELEN规定了此名字的最大长度(通常是64字节)。如果宿主机联接到TCP/IP网络中，则此主机名通常是该主机的完整域名

hostname(1)命令可用来存取和设置主机名。(超级用户用一个类似的函数sethostname来设置主机名)。主机名通常在系统启动时设置，由/etc/rc取自一个启动文件
#+BEGIN_SRC sh
  klose@gentoo /var/log $ hostname 

  gentoo
#+END_SRC

* 日期函数
