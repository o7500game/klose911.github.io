#+TITLE: 进程控制
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: env.html   
#+HTML_LINK_HOME: apue.html
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
本章介绍UNIX的进程控制：
+ 创建新进程、执行程序和进程终止
+ 进程的实际、有效和保存的用户和组ID
+ 解释器文件和system函数
+ 进程会计机制结束

* 进程标识
每个进程都有一个非负整型的唯一进程ID。因为进程ID标识符总是唯一的，常将其用做其他标识符的一部分以保证其唯一性：
1. ID 0进程：调度进程，它是内核进程，用来执行进程管理，也被称为交换进程
2. ID 1进程：通常是init进程，在自举过程结束时由内核调用/sbin/init，通常读与系统有关的初始化文件(/etc/rc*文件)，并将系统引导到一个状态(例如多用户)。init进程决不会终止，它是一个普通的用户进程(不是内核中的系统进程)，但是它以超级用户特权运行


除了进程ID每个进程还有一些其他标识符，下列函数返回这些标识符：
#+BEGIN_SRC C
  #include <sys/types.h>
  #include <unistd.h>

  /**
     获得调用进程的进程ID　

     返回：调用进程的进程ID
  ,*/
  pid_t getpid(void);
  /**
     获得调用进程的父进程ID

     return：调用进程的父进程ID 
  ,*/
  pid_t getppid(void);

  /**
     获得调用进程的实际用户ID

     return：调用进程的实际用户ID
  ,*/
  uid_t getuid(void);

  /**
     获得调用进程的有效用户ID

     return：调用进程的有效用户ID
  ,*/
  uid_t geteuid(void);

  /**
     获得调用进程的实际组ID

     return：调用进程的实际组ID
  ,*/
  gid_t getgid(void);

  /**
     获得调用进程的有效组ID

     return：调用进程的有效组ID
  ,*/
  gid_t getegid(void); 
#+END_SRC
注意：这些函数都没有出错返回！

* 进程生命周期

** 创建进程
