#+TITLE: 类加载
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: class_structure.html   
#+HTML_LINK_HOME: jvm.html
#+OPTIONS: num:nil timestamp:nil ^:nil

*类加载机制* ：虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型

与那些在编译时需要进行连接工作的语言不同，在Java语言里面，类型的加载、连接和初始化过程都是在 *程序运行期间* 完成的，这种策略虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性就是依赖 *运行期动态加载和动态连接* 这个特点实现的。例如，如果编写一个面向接口的应用程序，可以等到运行时再指定其实际的实现类;用户可以通过Java预定义的和自定义类加载器，让一个本地的应用程序可以在运行时从网络或其他地方加载一个二进制流作为程序代码的一部分，这种组装应用程序的方式目前已广泛应用于Java程序之中。从最基础的Applet、JSP到相对复杂的OSGi技术，都使用了Java语言运行期类加载的特性


* 加载时机
  类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括:
1. 加载 Loading
2. 验证 Verification
3. 准备 Preparation
4. 解析 Resolution
5. 初始化 Initialization
6. 使用 Using
7. 卸载 Unloading
   
其中验证、准备、解析3个部分统称为 *连接* (Linking)，这7个阶段的发生顺序如图所示：

#+ATTR_HTML: image :width 70% 
[[file:pic/class-life-cycle.jpg]] 

#+BEGIN_EXAMPLE
  加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始

  而解析阶段则不一定: 它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定(也称为动态绑定或晚期绑定)

  注意，这里写的是按部就班地“开始”，而不是按部就班地“进行”或“完成”，强调这点是因为这些阶段通常都是互相交叉地混合式进行的，会在一个阶段执行的过程中调用、激活另外一个阶段
#+END_EXAMPLE

Java虚拟机规范中并没有进行强制约束什么时候需要开始类加载，这点可以交给虚拟机的具体实现来自由把握。但是对于初始化阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行 *初始化* (而加载、验证、准备自然需要在此之前开始):
1. 遇到 _new_ 、 _getstatic_ 、 _putstatic_ 或 _invokestatic_ 这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是:
   + 使用new关键字实例化对象
   + 读取或设置一个类的静态字段(被final修饰、已在编译期把结果放入常量池的静态字段除外)
   + 调用一个类的静态方法
2. 使用 _java.lang.reflect_ 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化
3. 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化
4. 当虚拟机启动时，用户需要指定一个要执行的主类( _包含main()方法的那个类_ )，虚拟机会先初始化这个主类
5. 当使用JDK1.7的动态语言支持时，如果一个 _java.lang.invoke.MethodHandle_ 实例最后的解析结果 *REF _ getStatic* 、 *REF _ putStatic* 、 *REF _ invokeStatic* 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化
   
对于这5种会触发类进行初始化的场景，虚拟机规范中使用了一个很强烈的限定语: *有且只有* ，这5种场景中的行为称为对一个类进行 _主动引用_ 。除此之外，所有引用类的方式都不会触发初始化，称为 _被动引用_

** 被动引用
   
   #+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  /**
   ,* 被动使用类字段演示一：
   ,* 通过子类引用父类的静态字段，不会导致子类初始化
   ,**/
  public class SuperClass {

          static {
                  System.out.println("SuperClass init!");
          }

          public static int value = 123;
  }

  public class SubClass extends SuperClass {

          static {
                  System.out.println("SubClass init!");
          }
  }

  /**
   ,* 非主动使用类字段演示
   ,**/
  public class NotInitialization {

          public static void main(String[] args) {
                  System.out.println(SubClass.value);
          }

  }
   #+END_SRC
   
   #+RESULTS:
: SuperClass init!
: 123
   
   上述代码运行之后，只会输出　_Superclass init!_ ，而不会输出 _Subclass init!_ 。 *对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化* 。至于是否要触发子类的加载和验证，在虚拟机规范中并未明确规定，这点取决于虚拟机的具体实现。对于SunHotSpot虚拟机来沒，可通过 _-XX:+TraceClassLoading_ 参数观察到此操作会导致子类的加载
   
   #+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  /**
   ,* 被动使用类字段演示二：
   ,* 通过数组定义来引用类，不会触发此类的初始化
   ,**/
  public class NotInitialization {

      public static void main(String[] args) {
          SuperClass[] sca = new SuperClass[10];
      }
  }
   #+END_SRC
   #+RESULTS:
   
   运行之后发现没有输出 _Superclass init!_ ，说明并没有触发类org.fenixsoft.classloading.SuperClass的初始化阶段。但是这段代码里面触发了另外一个名为 *[Lorg.fenixsoftclassloading.Superclass* 的类的初始化阶段，对于用户代码来说，这并不是一个合法的类名称，它是一个由 *虚拟机自动生成* 的、直接继承于 _java.lang.Object_ 的子类，创建动作由字节码指令 _newarray_ 触发
   
   
   这个类代表了一个元素类型为 _org.fenixsoft.classloading.SuperClass_ 的 *一维数组* ，数组中应有的属性和方法(用户可直接使用的只有被修饰为 *public* 的 _length属性_ 和 _clone()_ 方法)都实现在这个类里
   
   #+BEGIN_EXAMPLE
   Java语言中对数组的访问比C/C++相对安全是因为这个类封装了数组元素的访问方法，而C/C++直接翻译为对数组指针的移动
   
   在Java语言中，当检查到发生数组越界时会拋出java.lang.ArrayIndexOutOfBoundsException异常
   
   准确地说,越界检查不是封装在数组元素访问的类中,而是封装在数组访问的xaload、 xastore字节码指令中
   #+END_EXAMPLE
   
   #+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  /**
   ,* 被动使用类字段演示三：
   ,* 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。
   ,**/
  public class ConstClass {

          static {
                  System.out.println("ConstClass init!");
          }

          public static final String HELLOWORLD = "hello world";
  }

  /**
   ,* 非主动使用类字段演示
   ,**/
  public class NotInitialization {

          public static void main(String[] args) {
                  System.out.println(ConstClass.HELLOWORLD);
          }
  }
   #+END_SRC
   #+RESULTS:
: hello world
   
   上述代码运行之后，也没有输出 _ConstClass init!_ ，这是因为虽然在Java源码中引用了 _ConstClass_ 类中的常量 _HELLOWORLD_ ，但其实在编译阶段通过常量传播优化，已经将此常量的值 _helloworld_ 存储到了 _Notlnitialization_ 类的 *常量池* 中，以后Notlnitialization对常量ConstClass.HELLOWORLD的引用实际都被转化为Notlnitializationl对 *自身常量池的引用* 了。实际上 *Notlnitialization的Class文件之中并没有ConstClass类的符号引用入口* ，这两个类在编译成Class之后就不存在任何联系了
   
** 接口加载
   接口的加载过程与类加载过程稍有一些不同，针对接口需要做一些特殊说明:
+ 接口也有初始化过程，上面类初始化的代码都是用静态语句块 _static{}_ 来输出初始化信息的，而接口中不能使用 *static{}* 语句块，但编译器仍然会为接口生成 *<clinit>()* 类构造器，用于 _初始化接口中所定义的成员变量_ 
+ 当一个类在初始化时，要求其父类全部都已经初始化过了，但是 *一个接口在初始化时，并不要求其父接口全部都完成了初始化* ，只有在 _真正使用到父接口_ 的时候(如引用接口中定义的常量)才会初始化
  
* 类加载过程
  
** 加载
   *加载* 是 _类加载_ (Class Loading)过程的一个阶段，在加载阶段，虚拟机需要完成以下3件事情:
1. 通过一个类的全限定名来获取定义此类的二进制字节流
2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
3. 在内存中生成一个代表这个类的 _java.lang.Class对象_ ，作为方法区这个类的各种数的访问入口
   
虚拟机规范的这3点要求其实并不算具体，因此虚拟机实现与具体应用的灵活度都是相当大的。例如 _通过一个类的全限定名来获取定义此类的二进制字节流_ 这条，它没有指明二进制字节流要从一个Class文件中获取，准确地说是根本没有指明要从哪里获取、怎样获取。虚拟机设计团队在加载阶段搭建了一个相当开放的、广阔的“舞台”，Java发展历程中，充满创造力的开发人员则在这个“舞台”上玩出了各种花样，许多举足轻重的Java技术都建立在这一基础之上，例如:
+ 从 *ZIP* 包中读取，这很常见，最终成为日后 _JAR_ 、 _EAR_ 、 _WAR_ 格式的基础
+ 从网络中获取，这种场景最典型的应用就是 _Applet_
+ 运行时计算生成，这种场景使用得最多的就是 *动态代理* 技术，在 _java.lang.reflect.Proxy_ 中，就是用了 _ProxyGenerator.generateProxyClass_ 来为特定接口生成形式为 _*$Proxy_ 的代理类的二进制字节流
+ 由其他文件生成，典型场景是 _JSP_ 应用，即由JSP文件生成对应的Class类
+ 从数据库中读取，这种场景相对少见些，例如有些中间件服务器(如 _SAP Netweaver_ )可以选择把程序安装到数据库中来完成程序代码在集群间的分发
+ …… 
  
相对于类加载过程的其他阶段，一个非数组类的加载阶段(准确地说，是加载阶段中获取类的二进制字节流的动作)是开发人员可控性最强的，因为加载阶段既可以使用 _系统提供的引导类加载器_ 来完成，也可以由 _用户自定义的类加载器_ 去完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式(即 _重写一个加载器的loadClass()方法_ )

对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型(Element Type，指的是数组去掉所有维度的类型)最终是要靠类加载器去创建，一个数组类(下面简称为C)创建过程就遵循以下规则:
+ 如果数组的组件类型(Component Type，指的是数组去掉一个维度的类型)是引用类型，那就 *递归采用本节中定义的加载过程去加载这个组件类型* ，数组C将在加载该组件类型的类加载器的类名称空间上被标识(这点很重要， _一个类必须与类加载器一起确定唯一性_ )
+ 如果数组的组件类型不是引用类型(例如int[]数组)，Java虚拟机将会把数组C标记为 *与引导类加载器关联* 
+ *数组类的可见性与它的组件类型的可见性一致* ，如果组件类型不是引用类型，那数组类的可见性将默认为 _public_ 
  
加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个java.lang.Class类的对象(并没有明确规定是在Java堆中，对于HotSpot虚拟机而言， _Class对象比较特殊，它虽然是对象，但是存放在方法区里面_ )，这个对象将作为程序访问方法区中的这些类型数据的外部接口

#+BEGIN_EXAMPLE
  加载阶段与连接阶段的部分内容(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始

  但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序 
#+END_EXAMPLE

** 验证
   验证是连接阶段的第一步,这一阶段的目的是为了 *确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全* 
   
   #+BEGIN_EXAMPLE
   Java语言本身是相对安全的语言(依然是相对于C/C++来说),使用纯粹的Java代码无法做到诸如访问数组边界以外的数据、将一个对象转型为它并未实现的类型、跳转到不存在的代码行之类的事情
   
   如果这样做了,编译器将拒绝编译。但Class文件并不—定要求用Java源码编译而来,可以使用任何途径产生,甚至包括用十六进制编辑器直接编写来产生Class文件
   
   在字节码语言层面上,上述Java代码无法做到的事情都是可以实现的, 至少语义上是可以表达出来的
   
   虚拟机如果不检查输入的字节流,对其完全信任的话,很可能会因为载入了有害的字节流而导致系统崩溃,所以验证是虚拟机对自身保护的一项重要工作
   #+END_EXAMPLE
   
   验证阶段是非常重要的,这个阶段是否严谨,直接决定了Java虚拟机是否能承受恶意代码的攻击,从执行性能的角度上讲,验证阶段的工作量在虚拟机的类加载子系统中又占了相当大的一部分。从整体上看,验证阶段大致上会完成下面4个阶段的检验动作:
+ 文件格式验证
+ 元数据验证
+ 字节码验证
+ 符号引用验证
  
*** 文件格式验证
    验证 *字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理* 。这一阶段可能包括下面这些验证点:
+ 是否以魔数 _0xCAFEBABE_ 开头
+ _主、次版本号_ 是否在当前虚拟机处理范围之内
+ 常量池的常量中是否有不被支持的常量类型(检查常量tag标志)
+ 指向 _常量的各种索引值_ 中是否有指向不存在的常量或不符合类型的常量
+ CONSTANT_Utf8_info型的常量中是否有不符合UTF8编码的数据
+ Class文件中各个部分及文件本身是否有被删除的或附加的其他信息
+ ……
  
实际上，第一阶段的验证点还远不止这些，上面这些只是从HotSpot虚拟机源码中摘抄的一小部分内容，该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。这阶段的验证是 *基于二进制字节流* 进行的，只有通过了这个阶段的验证后，字节流才会进入内存的方法区中进行存储，所以后面的3个验证阶段全部是 *基于方法区的存储结构* 进行的，不会再直接操作字节流

*** 元数据验证
    *对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求* ，这个阶段可能包括的验证点如下:
+ 这个类 _是否有父类_ (除了java.lang.Object之外，所有的类都应当有父类)
+ 这个类的父类是否 _继承了不允许被继承的类_ (被final修饰的类)
+ 如果这个类不是抽象类，是否 _实现了其父类或接口之中要求实现的所有方法_
+ _类中的字段、方法是否与父类产生矛盾_ (例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等)
+ ……
  
第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规范的元数据信息

*** 字节码验证
    第三阶段是整个验证过程中最复杂的一个阶段，主要目的是 *通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的* 。在第二阶段对元数据信息中的数据类型做完校验后，这个阶段将对 *类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件* ，例如: 
+ 保证任意时刻 _操作数栈的数据类型与指令代码序列都能配合工作_ ，例如不会出现类似这样的情况:
  + 在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中
+ 保证 _跳转指令不会跳转到方法体以外的字节码指令上_ 
+ 保证方法体中的 _类型转换是有效的_ 
  + 可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的
+ ……
  
#+BEGIN_EXAMPLE
  如果一个类方法体的字节码没有通过字节码验证，那肯定是有问题的

  但如果一个方法体通过了字节码验证，也不能说明其一定就是安全的

  即使字节码验证之中进行了大量的检查，也不能保证这一点

  这里涉及了离散数学中一个很著名的问题“Halting Problem”

  通过程序去校验程序逻辑是无法做到绝对准确的，不能通过程序准确地检查出程序是否能在有限的时间之内结束运行
#+END_EXAMPLE

由于数据校验的高复杂性，虚拟机设计团队为了避免过多的时间消耗在字节码验证阶段，在JDK1.6之后的Javac编译器和Java虚拟机中进行了一项优化，给方法体的Code属性的属性表中增加了一项名为 _StackMapTable_ 的属性，这项属性描述了方法体中所有的基本块(Basic Block，按照控制流拆分的代码块)开始时本地变量表和操作栈应有的状态，在字节码验证期间，就不需要根据程序推导这些状态的合法性，只需要检查StackMapTable属性中的记录是否合法即可。这样将字节码验证的类型推导转变为类型检查从而节省一些时间

#+BEGIN_EXAMPLE
  理论上StackMapTable属性也存在错误或被篡改的可能

  所以是否有可能在恶意篡改了Code属性的同时，也生成相应的StackMapTable属性来骗过虚拟机的类型校验则是虚拟机设计者值得思考的问题
#+END_EXAMPLE

在JDK1.6的HotSpot虚拟机中提供了 _-XX:-UseSplitVerifier_ 选项来关闭这项优化，或者使用参数 _-XX:+FailOverTo0ldVerifier_ 要求在类型校验失败的时候退回到旧的类型推导方式进行校验。而在JDK1.7之后，对于主版本号大于50的Class文件，使用类型检查来完成数据流分析校验则是唯一的选择，不允许再退回到类型推导的校验方式

*** 符号引用验证
    最后一个阶段的校验发生在虚拟机将 _符号引用转化为直接引用的时候_ ，这个转化动作将在连接的第三阶段 *解析* 阶段中发生。符号引用验证可以看做是对 *类自身以外(常量池中的各种符号引用)的信息进行匹配性校验* ，通常需要校验下列内容:
+ 符号引用中通过 _字符串描述的全限定名是否能找到对应的类_
+ 在指定类中是否 _存在符合方法的字段描述符以及简单名称所描述的方法和字段_
+ 符号引用中的 _类、字段、方法的访问性_ (private、protected、public、default)是否可被当前类访问
+ ……  
  
符号引用验证的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将会拋出一个 _java.lang.IncompatibleClassChangeError_ 异常的子类
+ _java.lang.IllegalAccessError_
+ _java.lang.NoSuchFieldError_
+ _java.lang.NoSuchMethodError_ 
  
对于虚拟机的类加载机制来说，验证阶段是一个非常重要的、但不是一定必要(因为对程序运行期没有影响)的阶段。如果所运行的全部代码(包括自己编写的及第三方包中的代码)都已经被反复使用和验证过，那么在实施阶段就可以考虑使用 _-Xverify:none_ 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间

** 准备
   *准备* 阶段是正式 *为类变量分配内存并设置类变量初始值* 的阶段，这些变量所使用的内存都将在 _方法区_ 中进行分配。这个阶段中有两个容易产生混淆的概念需要强调一下
1. 这时候进行内存分配的仅包括 *类变量* (被 _static_ 修饰的变量)，而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中
2. 这里所说的初始值通常情况下是 *数据类型的零值* ，假设一个类变量的定义为:
#+BEGIN_SRC java
  public static int value=123;
#+END_SRC
那变量value在准备阶段过后的初始值为 _0_ 而不是123, 因为这时候尚未开始执行任何Java方法,而把value賦值为123的 _putstatic_ 指令是程序被编译运,存放于类构造器 _<clinit>()_ 方法之中,所以把value賦值为123的动作将在 *初始化* 阶段才会执行。下表列出了Java中所有基本数据类型的零值

#+CAPTION: 基本数据类型的零值
#+ATTR_HTML: :border 1 :rules all :frame boader
| 数据类型  | 零值      |
| int       | 0         |
| long      | 0L        |
| short     | (short) 0 |
| char      | '\u0000'  |
| byte      | (byte) 0  |
| boolean   | false     |
| float     | 0.0f      |
| double    | 0.0d      |
| reference | null      |

如果类字段的字段属性表中存在 _ConstantValue_ 属性，那在 *准备* 阶段变量value就会被初始化为 _ConstantValue属性_ 所指定的值，假设上面类变量value的定义变为:

#+BEGIN_SRC java
  public static final int value = 123;
#+END_SRC
编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123

** 解析
   *解析* 阶段是虚拟机 *将常量池内的符号引用替换为直接引用* 的过程，符号引用在前一章讲解Class文件格式的时候已经出现过多次，在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现
+ *符号引用* :以一组符号来描述所引用的目标，符号可以是 _任何形式的字面量_ ，只要使用时能无歧义地定位到目标即可
  + *虚拟机实现的内存布局无关*
  + 引用的目标并 *不一定已经加载到内存* 中
  + 各种虛拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中
+ *直接引用* :可以是 _直接指向目标的指针_ 、 _相对偏移量_ 或是一个能 _间接定位到目标的句柄_ 
  + *和虚拟机实现的内存布局相关*
  + 同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同
  + 如果有了直接引用，那 *引用的目标必定已经在内存中存在* 
    
虚拟机规范之中并未规定解析阶段发生的具体时间，只要求了在执行 _anewarray_ 、 _checkcast_ 、 _getfield_ 、 _getstatic_ 、 _instanceof_ 、 _invokedynamic_ 、 _invokeinterface_ 、 _invokespecial_ 、 _invokestatic_ 、 _invokevirtual_ 、 _ldc_ 、 _ldc_w_ 、 _multianewarray_ 、 _new_ 、 _putfield_ 和 _putstatic_ 这16个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。所以虚拟机实现可以根据需要来判断到底是在类被加载器加载时就对常量池中的符号引用进行解析，还是等到一个符号引用将要被使用前才去解析它


对同一个符号引用进行多次解析请求是很常见的事情，除 _invokedynamic_ 指令以外，虚拟机实现可以对第一次解析的结果进行 *缓存* (在运行时常量池中记录直接引用，并把常量标识为已解析状态)从而避免解析动作重复进行。无论是否真正执行了多次解析动作，虚拟机需要保证的是在同一个实体中：
+ 如果一个符号引用之前已经被成功解析过，那么后续的引用解析请求就应当一直成功
+ 如果第一次解析失败了，那么其他指令对这个符号的解析请求也应该收到相同的异常
  
#+BEGIN_EXAMPLE
  当碰到某个前面已经由invokedynamic指令触发过解析的符号引用时，并不意味着这个解析结果对于其他也invokedynamic指令也同样生效

  因为invokedynamic指令的目的本来就是用于动态语言支持(目前仅使用Java语言不会生成这条字节码指令)

  它所对应的引用称为“动态调用>点限定符”，这里“动态”的含义就是必须等到程序实际运行到这条指令的时候，解析动作才能进行

  相对的，其余可触发解析的指令都是“静态”的，可以在刚刚完成加载阶段，还没有开始执行代码时就进行解析
#+END_EXAMPLE


解析动作主要针对7类符号引用进行: 
+ 类或接口:CONSTANT_Class_info
+ 字段:CONSTANT_Fieldref_info
+ 类方法:CONSTANT_Methodref_info
+ 接口方法:CONSTANT_InterfaceMethodref_info
+ 方法类型:CONSTANT_MethodType_info
+ 方法句柄:CONSTANT_MethodHandle_info
+ 调用点限定符:CONSTANT_invokeDynamic_info
  
#+BEGIN_EXAMPLE
  最后3种，与JDK1.7新增的动态语言支持息息相关

  由于Java语言是一门静态类型的语言，因此在没有介绍invokedynamic指令的语义之前，没有办法将它们和现在的Java语言对应上
#+END_EXAMPLE

*** 类或接口的解析 
    假设当前代码所处的类为 _D_ ，如果要把一个从未解析过的符号引用 _N_ 解析为一个类或接口 _C_ 的直接引用，那虚拟机完成整个解析的过程需要以下3个步骤:
1. 如果 C *不是一个数组* 类型，那虚拟机将会把代表N的 _全限定名_ 传递给 _D的类加载器_ 去加载这个类C
   + 在加载过程中，由于 _元数据验证_ 、 _字节码验证_ 的需要，又可能触发其他相关类的加载动作，例如加载这个类的父类或实现的接口
   + 一旦这个加载过程出现了任何异常，解析过程就宣告失败
2. 如果C是一个 *数组* 类型，并且数组的 *元素类型为对象* ，也就是N的描述符会是类似 _[Ljava/lang/Integer_ 的形式
   + 按照第1点的规则加载数组元素类型。如果N的描述符如前面所假设的形式，需要加载的元素类型就是 _java.lang.Integer_
   + 虚拟机生成一个代表此数组维度和元素的数组对象
3. 如果上面的步骤没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类或接口了，但在解析完成之前还要进行符号引用验证，确认 *D是否具备对C的访问权限* 
  + 如果发现不具备访问权限，将拋出 _java.lang.IllegalAccessError_ 异常

*** 字段解析
要解析一个未被解析过的字段符号引用，首先将会对 _字段表内class_index_ 项中索引的 CONSTANT_Class_info 符号引用进行解析，也就是 *字段所属的类或接口的符号引用* 
+ 如果在解析这个类或接口符号引用的过程中出现了任何异常，都会导致字段符号引用解析的失败
+ 如果解析成功完成，那将这个字段所属的类或接口用C表示，虚拟机规范要求按照如下步骤对C进行后续字段的搜索:
  1. 如果 *C本身就包含了简单名称和字段描述符都与目标相匹配的字段* ，则返回这个字段的直接引用，查找结束
  2. 如果在C中实现了接口，将会按照 _继承关系从下往上递归搜索各个接口和它的父接口_ ，如果 *接口中包含了简单名称和字段描述符都与目标相匹配的字段* ，则返回这个字段的直接引用，查找结束
  3. 如果C不是 _java.lang.Object_ 的话，将会按照 _继承关系从下往上递归搜索其父类_ ，如果在 *父类中包含了简单名称和字段描述符都与目标相匹配的字段* ，则返回这个字段的直接引用，查找结束
  4. 查找失败，拋出 _java.lang.NoSuchFieldError_ 异常。
+ 如果查找过程成功返回了引用，将会对这个 _字段进行权限验证_ ，如果发现不具备对字段的访问权限，将拋出 _java.lang.IllegalAccessError_ 异常。

在实际应用中，虚拟机的编译器实现可能会比上述规范要求得更加严格一些，如果有一个同名字段同时出现在C的接口和父类中，或者同时在自己或父类的多个接口中出现，那编译器将可能拒绝编译

#+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  public class FieldResolution {
          interface Interface0 {
                  int A = 0;
          }

          interface Interface1 extends Interface0 {
                  int A = 1;
          }

          interface Interface2 {
                  int A = 2;
          }

          static class Parent implements Interface1 {
                  public static int A = 3;
          }

          static class Sub extends Parent implements Interface2 {
                  //public static int A = 4;
          }

          public static void main(String[] args) {
                  System.out.println(Sub.A);
          }
  }
#+END_SRC
#+RESULTS:
: FieldResolution.java:23: error: reference to A is ambiguous
:               System.out.println(Sub.A);		                      ^
: both variable A in Parent and variable A in Interface2 match
: 1 error

注释了Sub类中的 _public static int A =4;_ ，接口与父类同时存在字段A，那编译器将提示 *The field Sub.A is ambiguous* ，并且拒绝编译这段代码

*** 类方法解析
类方法解析的第一个步骤与字段解析一样
+ 先解析出 _类方法表的class_index_ 项中索引的方法 *所属的类或接口的符号引用* 。如果解析成功，依然用C表示这个类，接下来虚拟机将会按照如下步骤进行后续的类方法搜索
  1. 类方法和接口方法符号引用的常量类型定义是分开的，如果在 *类方法表中发现class_index中索引的C是个接口* ，那就直接拋出 _java.lang.IncompatibleClassChangeError_ 异常
  2. 如果通过了第1步，在类C中查找是否 *有简单名称和描述符都与目标相匹配的方法* ，如果有则返回这个方法的直接引用，查找结束
  3. 在类C的 *父类中递归查找是否有简单名称和描述符都与目标相匹配的方法* ，如果有则返回这个方法的直接引用，查找结束
  4. 在类C实现的 *接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法* ，如果存在匹配的方法，说明类C是一个 *抽象类* ，这时查找结束，拋出 _Java.lang.AbstractMethodError_ 异常
  5. 宣告方法查找失败，拋出 _java.lang.NoSuchMethodError_ 
+ 如果查找过程成功返回了直接引用，将会对这个方法进行 _权限验证_ ，如果发现不具备对此方法的访问权限，将拋出 _java.lang.IllegalAccessError_ 异常

*** 接口方法解析
接口方法也需要

+ 先解析出 _接口方法表的class_index_ 项中索引的方法所属的 *类或接口的符号引用* ，如果解析成功，依然用C表示这个接口，接下来虚拟机将会按照如下步骤进行后续的接口方法搜索
  1. 与类方法解析不同，如果在接口方法表中发现class_index中的索引 *C是个类而不是接口* ，那就直接拋出 _java.lang.IncompatibleClassChangeError_ 异常
  2. 在接口 *C中查找是否有简单名称和描述符都与目标相匹配的方法* ，如果有则返回这个方法的直接引用，查找结束
  3. 在接口C的 *父接口中递归查找* ，直到 *java.lang.Object* 类(查找范围会包括Object类)为止，看是否有 *简单名称和描述符都与目标相匹配的方法* ，如果有则返回这个方法的直接引用，查找结束
  4. 宣告方法查找失败，拋出 _java.lang.NoSuchMethodError_ 异常

由于接口中的所有方法默认都是public的，所以 *不存在访问权限* 的问题，因此接口方法的符号解析应当不会拋出java.langIllegalAccessError异常

** 初始化
类 *初始化* 阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才 *真正开始执行类中定义的Java程序代码(或者说是字节码)* 

在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主观计划去 *初始化类变量和其他资源* ，或者可以从另外一个角度来表达:初始化阶段是执行类构造器 _<clinit>()_ 方法的过程

+ _<clinit>()_ 方法是由 *编译器自动收集类中的所有类变量的賦值动作和静态语句块(static{}块)中的语句合并产生的* 
+ 编译器 *收集的顺序是由语句在源文件中出现的顺序所决定的*
+ *静态语句块中只能访问到定义在静态语句块之前的变量* 
  + *定义在它之后的变量，在前面的静态语句块可以賦值，但是不能访问*  

#+BEGIN_SRC java :results output :exports result
  public class Test {
          static {
                  i = 0;  //  给变量复制可以正常编译通过
                  System.out.print(i);  // 这句编译器会提示“非法向前引用”  
          }
          static int i = 1;

          public static void main(String[] args) {
                  System.out.print(i);
          }

  }
#+END_SRC

#+RESULTS:
: Test.java:4: error: illegal forward reference
: System.out.print(i);  // 这句编译器会提示“非法向前引用” 
:                  ^

_<clinit>()_ 方法与类的构造函数(或者说实例构造器 _<init>()_ 方法)不同，它 *不需要显式地调用父类构造器* ， *虚拟机会保证在子类的<cinit>()方法执行之前，父类的<clinit>()方法已经执行完毕* 。因此在虚拟机中第一个被执行的<clinit>()方法的类肯定是 _java.lang.Object_ 

由于父类的<clinit>()方法先执行，也就意味着 *父类中定义的静态语句块要优先于子类的变量赋值操作* 

#+BEGIN_SRC java :results output :exports result
   static class Parent {
          public static int A = 1;
          static {
                  A = 2;
          }
  }

  static class Sub extends Parent {
          public static int B = A;
  }

  public static void main(String[] args) {
          System.out.println(Sub.B);
  }
#+END_SRC

#+RESULTS:
: 2

<clinit>()方法对于类或接口来说并 *不是必需* 的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法

接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此 *接口与类一样都会生成 _<clinit>()_ 方法* 。但接口与类不同的是
+ 执行接口的<clinit>()方法 *不需要先执行父接口的 _<clinit>()_ 方法* 。只有当父接口中定义的变量使用时，父接口才会初始化
+ *接口的实现类在初始化时也一样不会执行接口的 _<clinit>()_ 方法* 

虚拟机会 *保证一个类的 _<clinit>()_ 方法在多线程环境中被正确地加锁、同步* 
+ 如果 _多个线程_ 同时去初始化一个类，那么只会有一个线程去执行这个类的 _<clinit>()_ 方法，其他线程都需要 *阻塞等待* ，直到活动线程执行<clinit>()方法完毕

如果在一个类的 _<clinit>()_ 方法中有耗时很长的操作，就可能造成 *多个进程阻塞* ，在实际应用中这种阻塞往往是很隐蔽的

#+BEGIN_SRC java :results output :exports result
  static class DeadLoopClass {
          static {
                  // 如果不加上这个if语句，编译器将提示“Initializer does not complete normally”并拒绝编译
                  if (true) {
                          System.out.println(Thread.currentThread() + "init DeadLoopClass");
                          while (true) {
                          }
                  }
          }
  }

  public static void main(String[] args) {
          Runnable script = new Runnable() {
                          public void run() {
                                  System.out.println(Thread.currentThread() + "start");
                                  DeadLoopClass dlc = new DeadLoopClass();
                                  System.out.println(Thread.currentThread() + " run over");
                          }
                  };

          Thread thread1 = new Thread(script);
          Thread thread2 = new Thread(script);
          thread1.start();
          thread2.start();
  }
#+END_SRC

#+RESULTS:
: Thread[Thread-0 ,5 ,main]start 
: Thread[Thread-1 ,5 ,main]start 
: Thread[Thread-0 ,5 ,main]init DeadLoopClass

即一条线程在死循环以模拟长时间操作，另外一条线程在阻塞等待

#+BEGIN_EXAMPLE
  其他线程虽然会被阻塞,但如果执行<clinit>()方法的那条线程退出<clinit>()方法后,其他线程唤醒之后不会再次进入<clinit>()方法

  因为同一个类加载器下,一个类型只会初始化一次
#+END_EXAMPLE

* 类加载器

