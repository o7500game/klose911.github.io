#+TITLE: 类加载
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: class_structure.html   
#+HTML_LINK_HOME: jvm.html
#+OPTIONS: num:nil timestamp:nil ^:nil

*类加载机制* ：虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型

与那些在编译时需要进行连接工作的语言不同，在Java语言里面，类型的加载、连接和初始化过程都是在 *程序运行期间* 完成的，这种策略虽然会令类加载时稍微增加一些性能开销，但是会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性就是依赖 *运行期动态加载和动态连接* 这个特点实现的。例如，如果编写一个面向接口的应用程序，可以等到运行时再指定其实际的实现类;用户可以通过Java预定义的和自定义类加载器，让一个本地的应用程序可以在运行时从网络或其他地方加载一个二进制流作为程序代码的一部分，这种组装应用程序的方式目前已广泛应用于Java程序之中。从最基础的Applet、JSP到相对复杂的OSGi技术，都使用了Java语言运行期类加载的特性


* 加载时机
  类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括:
1. 加载 Loading
2. 验证 Verification
3. 准备 Preparation
4. 解析 Resolution
5. 初始化 Initialization
6. 使用 Using
7. 卸载 Unloading
   
其中验证、准备、解析3个部分统称为 *连接* (Linking)，这7个阶段的发生顺序如图所示：

#+ATTR_HTML: image :width 70% 
[[file:pic/class-life-cycle.jpg]] 

#+BEGIN_EXAMPLE
  加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始

  而解析阶段则不一定: 它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定(也称为动态绑定或晚期绑定)

  注意，这里写的是按部就班地“开始”，而不是按部就班地“进行”或“完成”，强调这点是因为这些阶段通常都是互相交叉地混合式进行的，会在一个阶段执行的过程中调用、激活另外一个阶段
#+END_EXAMPLE

Java虚拟机规范中并没有进行强制约束什么时候需要开始类加载，这点可以交给虚拟机的具体实现来自由把握。但是对于初始化阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行 *初始化* (而加载、验证、准备自然需要在此之前开始):
1. 遇到 _new_ 、 _getstatic_ 、 _putstatic_ 或 _invokestatic_ 这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是:
   + 使用new关键字实例化对象
   + 读取或设置一个类的静态字段(被final修饰、已在编译期把结果放入常量池的静态字段除外)
   + 调用一个类的静态方法
2. 使用 _java.lang.reflect_ 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化
3. 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化
4. 当虚拟机启动时，用户需要指定一个要执行的主类( _包含main()方法的那个类_ )，虚拟机会先初始化这个主类
5. 当使用JDK1.7的动态语言支持时，如果一个 _java.lang.invoke.MethodHandle_ 实例最后的解析结果 *REF _ getStatic* 、 *REF _ putStatic* 、 *REF _ invokeStatic* 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化
   
对于这5种会触发类进行初始化的场景，虚拟机规范中使用了一个很强烈的限定语: *有且只有* ，这5种场景中的行为称为对一个类进行 _主动引用_ 。除此之外，所有引用类的方式都不会触发初始化，称为 _被动引用_

** 被动引用
   
   #+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  /**
   ,* 被动使用类字段演示一：
   ,* 通过子类引用父类的静态字段，不会导致子类初始化
   ,**/
  public class SuperClass {

          static {
                  System.out.println("SuperClass init!");
          }

          public static int value = 123;
  }

  public class SubClass extends SuperClass {

          static {
                  System.out.println("SubClass init!");
          }
  }

  /**
   ,* 非主动使用类字段演示
   ,**/
  public class NotInitialization {

          public static void main(String[] args) {
                  System.out.println(SubClass.value);
          }

  }
   #+END_SRC
   
   #+RESULTS:
: SuperClass init!
: 123

上述代码运行之后，只会输出　_Superclass init!_ ，而不会输出 _Subclass init!_ 。 *对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化* 。至于是否要触发子类的加载和验证，在虚拟机规范中并未明确规定，这点取决于虚拟机的具体实现。对于SunHotSpot虚拟机来沒，可通过 _-XX:+TraceClassLoading_ 参数观察到此操作会导致子类的加载

#+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  /**
   ,* 被动使用类字段演示二：
   ,* 通过数组定义来引用类，不会触发此类的初始化
   ,**/
  public class NotInitialization {

      public static void main(String[] args) {
          SuperClass[] sca = new SuperClass[10];
      }
  }
#+END_SRC
#+RESULTS:

运行之后发现没有输出 _Superclass init!_ ，说明并没有触发类org.fenixsoft.classloading.SuperClass的初始化阶段。但是这段代码里面触发了另外一个名为 *[Lorg.fenixsoftclassloading.Superclass* 的类的初始化阶段，对于用户代码来说，这并不是一个合法的类名称，它是一个由 *虚拟机自动生成* 的、直接继承于 _java.lang.Object_ 的子类，创建动作由字节码指令 _newarray_ 触发


这个类代表了一个元素类型为 _org.fenixsoft.classloading.SuperClass_ 的 *一维数组* ，数组中应有的属性和方法(用户可直接使用的只有被修饰为 *public* 的 _length属性_ 和 _clone()_ 方法)都实现在这个类里

#+BEGIN_EXAMPLE
  Java语言中对数组的访问比C/C++相对安全是因为这个类封装了数组元素的访问方法，而C/C++直接翻译为对数组指针的移动

  在Java语言中，当检查到发生数组越界时会拋出java.lang.ArrayIndexOutOfBoundsException异常

  准确地说,越界检查不是封装在数组元素访问的类中,而是封装在数组访问的xaload、 xastore字节码指令中
#+END_EXAMPLE

#+BEGIN_SRC java :results output :exports result
  package org.fenixsoft.classloading;

  /**
   ,* 被动使用类字段演示三：
   ,* 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。
   ,**/
  public class ConstClass {

          static {
                  System.out.println("ConstClass init!");
          }

          public static final String HELLOWORLD = "hello world";
  }

  /**
   ,* 非主动使用类字段演示
   ,**/
  public class NotInitialization {

          public static void main(String[] args) {
                  System.out.println(ConstClass.HELLOWORLD);
          }
  }
#+END_SRC
#+RESULTS:
: hello world

上述代码运行之后，也没有输出 _ConstClass init!_ ，这是因为虽然在Java源码中引用了 _ConstClass_ 类中的常量 _HELLOWORLD_ ，但其实在编译阶段通过常量传播优化，已经将此常量的值 _helloworld_ 存储到了 _Notlnitialization_ 类的 *常量池* 中，以后Notlnitialization对常量ConstClass.HELLOWORLD的引用实际都被转化为Notlnitializationl对 *自身常量池的引用* 了。实际上 *Notlnitialization的Class文件之中并没有ConstClass类的符号引用入口* ，这两个类在编译成Class之后就不存在任何联系了

** 接口加载
接口的加载过程与类加载过程稍有一些不同，针对接口需要做一些特殊说明:
+ 接口也有初始化过程，上面类初始化的代码都是用静态语句块 _static{}_ 来输出初始化信息的，而接口中不能使用 *static{}* 语句块，但编译器仍然会为接口生成 *<clinit>()* 类构造器，用于 _初始化接口中所定义的成员变量_ 
+ 当一个类在初始化时，要求其父类全部都已经初始化过了，但是 *一个接口在初始化时，并不要求其父接口全部都完成了初始化* ，只有在 _真正使用到父接口_ 的时候(如引用接口中定义的常量)才会初始化

* 类加载过程

** 加载
*加载* 是 _类加载_ (Class Loading)过程的一个阶段，在加载阶段，虚拟机需要完成以下3件事情:
1. 通过一个类的全限定名来获取定义此类的二进制字节流
2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
3. 在内存中生成一个代表这个类的 _java.lang.Class对象_ ，作为方法区这个类的各种数的访问入口

虚拟机规范的这3点要求其实并不算具体，因此虚拟机实现与具体应用的灵活度都是相当大的。例如 _通过一个类的全限定名来获取定义此类的二进制字节流_ 这条，它没有指明二进制字节流要从一个Class文件中获取，准确地说是根本没有指明要从哪里获取、怎样获取。虚拟机设计团队在加载阶段搭建了一个相当开放的、广阔的“舞台”，Java发展历程中，充满创造力的开发人员则在这个“舞台”上玩出了各种花样，许多举足轻重的Java技术都建立在这一基础之上，例如:
+ 从 *ZIP* 包中读取，这很常见，最终成为日后 _JAR_ 、 _EAR_ 、 _WAR_ 格式的基础
+ 从网络中获取，这种场景最典型的应用就是 _Applet_
+ 运行时计算生成，这种场景使用得最多的就是 *动态代理* 技术，在 _java.lang.reflect.Proxy_ 中，就是用了 _ProxyGenerator.generateProxyClass_ 来为特定接口生成形式为 _*$Proxy_ 的代理类的二进制字节流
+ 由其他文件生成，典型场景是 _JSP_ 应用，即由JSP文件生成对应的Class类
+ 从数据库中读取，这种场景相对少见些，例如有些中间件服务器(如 _SAP Netweaver_ )可以选择把程序安装到数据库中来完成程序代码在集群间的分发
+ …… 

相对于类加载过程的其他阶段，一个非数组类的加载阶段(准确地说，是加载阶段中获取类的二进制字节流的动作)是开发人员可控性最强的，因为加载阶段既可以使用 _系统提供的引导类加载器_ 来完成，也可以由 _用户自定义的类加载器_ 去完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式(即 _重写一个加载器的loadClass()方法_ )

对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型(Element Type，指的是数组去掉所有维度的类型)最终是要靠类加载器去创建，一个数组类(下面简称为C)创建过程就遵循以下规则:
+ 如果数组的组件类型(Component Type，指的是数组去掉一个维度的类型)是引用类型，那就 *递归采用本节中定义的加载过程去加载这个组件类型* ，数组C将在加载该组件类型的类加载器的类名称空间上被标识(这点很重要， _一个类必须与类加载器一起确定唯一性_ )
+ 如果数组的组件类型不是引用类型(例如int[]数组)，Java虚拟机将会把数组C标记为 *与引导类加载器关联* 
+ *数组类的可见性与它的组件类型的可见性一致* ，如果组件类型不是引用类型，那数组类的可见性将默认为 _public_ 

加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个java.lang.Class类的对象(并没有明确规定是在Java堆中，对于HotSpot虚拟机而言， _Class对象比较特殊，它虽然是对象，但是存放在方法区里面_ )，这个对象将作为程序访问方法区中的这些类型数据的外部接口

#+BEGIN_EXAMPLE
  加载阶段与连接阶段的部分内容(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始

  但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序 
#+END_EXAMPLE

** 验证
验证是连接阶段的第一步,这一阶段的目的是为了 *确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全* 

#+BEGIN_EXAMPLE
  Java语言本身是相对安全的语言(依然是相对于C/C++来说),使用纯粹的Java代码无法做到诸如访问数组边界以外的数据、将一个对象转型为它并未实现的类型、跳转到不存在的代码行之类的事情

  如果这样做了,编译器将拒绝编译。但Class文件并不—定要求用Java源码编译而来,可以使用任何途径产生,甚至包括用十六进制编辑器直接编写来产生Class文件

  在字节码语言层面上,上述Java代码无法做到的事情都是可以实现的, 至少语义上是可以表达出来的

  虚拟机如果不检查输入的字节流,对其完全信任的话,很可能会因为载入了有害的字节流而导致系统崩溃,所以验证是虚拟机对自身保护的一项重要工作
#+END_EXAMPLE

验证阶段是非常重要的,这个阶段是否严谨,直接决定了Java虚拟机是否能承受恶意代码的攻击,从执行性能的角度上讲,验证阶段的工作量在虚拟机的类加载子系统中又占了相当大的一部分。从整体上看,验证阶段大致上会完成下面4个阶段的检验动作:
+ 文件格式验证
+ 元数据验证
+ 字节码验证
+ 符号引用验证

*** 文件格式验证
验证 *字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理* 。这一阶段可能包括下面这些验证点:
+ 是否以魔数 _0xCAFEBABE_ 开头
+ _主、次版本号_ 是否在当前虚拟机处理范围之内
+ 常量池的常量中是否有不被支持的常量类型(检查常量tag标志)
+ 指向 _常量的各种索引值_ 中是否有指向不存在的常量或不符合类型的常量
+ CONSTANT_Utf8_info型的常量中是否有不符合UTF8编码的数据
+ Class文件中各个部分及文件本身是否有被删除的或附加的其他信息
+ ……

实际上，第一阶段的验证点还远不止这些，上面这些只是从HotSpot虚拟机源码中摘抄的一小部分内容，该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。这阶段的验证是 *基于二进制字节流* 进行的，只有通过了这个阶段的验证后，字节流才会进入内存的方法区中进行存储，所以后面的3个验证阶段全部是 *基于方法区的存储结构* 进行的，不会再直接操作字节流

*** 元数据验证
*对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求* ，这个阶段可能包括的验证点如下:
+ 这个类 _是否有父类_ (除了java.lang.Object之外，所有的类都应当有父类)
+ 这个类的父类是否 _继承了不允许被继承的类_ (被final修饰的类)
+ 如果这个类不是抽象类，是否 _实现了其父类或接口之中要求实现的所有方法_
+ _类中的字段、方法是否与父类产生矛盾_ (例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等)
+ ……

第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规范的元数据信息

*** 字节码验证
第三阶段是整个验证过程中最复杂的一个阶段，主要目的是 *通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的* 。在第二阶段对元数据信息中的数据类型做完校验后，这个阶段将对 *类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件* ，例如: 
+ 保证任意时刻 _操作数栈的数据类型与指令代码序列都能配合工作_ ，例如不会出现类似这样的情况:
  + 在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中
+ 保证 _跳转指令不会跳转到方法体以外的字节码指令上_ 
+ 保证方法体中的 _类型转换是有效的_ 
  + 可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的
+ ……

#+BEGIN_EXAMPLE
  如果一个类方法体的字节码没有通过字节码验证，那肯定是有问题的

  但如果一个方法体通过了字节码验证，也不能说明其一定就是安全的

  即使字节码验证之中进行了大量的检查，也不能保证这一点

  这里涉及了离散数学中一个很著名的问题“Halting Problem”

  通过程序去校验程序逻辑是无法做到绝对准确的，不能通过程序准确地检查出程序是否能在有限的时间之内结束运行
#+END_EXAMPLE

由于数据校验的高复杂性，虚拟机设计团队为了避免过多的时间消耗在字节码验证阶段，在JDK1.6之后的Javac编译器和Java虚拟机中进行了一项优化，给方法体的Code属性的属性表中增加了一项名为 _StackMapTable_ 的属性，这项属性描述了方法体中所有的基本块(Basic Block，按照控制流拆分的代码块)开始时本地变量表和操作栈应有的状态，在字节码验证期间，就不需要根据程序推导这些状态的合法性，只需要检查StackMapTable属性中的记录是否合法即可。这样将字节码验证的类型推导转变为类型检查从而节省一些时间

#+BEGIN_EXAMPLE
  理论上StackMapTable属性也存在错误或被篡改的可能

  所以是否有可能在恶意篡改了Code属性的同时，也生成相应的StackMapTable属性来骗过虚拟机的类型校验则是虚拟机设计者值得思考的问题
#+END_EXAMPLE

在JDK1.6的HotSpot虚拟机中提供了 _-XX:-UseSplitVerifier_ 选项来关闭这项优化，或者使用参数 _-XX:+FailOverTo0ldVerifier_ 要求在类型校验失败的时候退回到旧的类型推导方式进行校验。而在JDK1.7之后，对于主版本号大于50的Class文件，使用类型检查来完成数据流分析校验则是唯一的选择，不允许再退回到类型推导的校验方式

*** 符号引用验证
最后一个阶段的校验发生在虚拟机将 _符号引用转化为直接引用的时候_ ，这个转化动作将在连接的第三阶段 *解析* 阶段中发生。符号引用验证可以看做是对 *类自身以外(常量池中的各种符号引用)的信息进行匹配性校验* ，通常需要校验下列内容:
+ 符号引用中通过 _字符串描述的全限定名是否能找到对应的类_
+ 在指定类中是否 _存在符合方法的字段描述符以及简单名称所描述的方法和字段_
+ 符号引用中的 _类、字段、方法的访问性_ (private、protected、public、default)是否可被当前类访问
+ ……  

符号引用验证的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将会拋出一个 _java.lang.IncompatibleClassChangeError_ 异常的子类
+ _java.lang.IllegalAccessError_
+ _java.lang.NoSuchFieldError_
+ _java.lang.NoSuchMethodError_ 
  
对于虚拟机的类加载机制来说，验证阶段是一个非常重要的、但不是一定必要(因为对程序运行期没有影响)的阶段。如果所运行的全部代码(包括自己编写的及第三方包中的代码)都已经被反复使用和验证过，那么在实施阶段就可以考虑使用 _-Xverify:none_ 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间

** 准备
*准备* 阶段是正式 *为类变量分配内存并设置类变量初始值* 的阶段，这些变量所使用的内存都将在 _方法区_ 中进行分配。这个阶段中有两个容易产生混淆的概念需要强调一下
1. 这时候进行内存分配的仅包括 *类变量* (被 _static_ 修饰的变量)，而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中
2. 这里所说的初始值通常情况下是 *数据类型的零值* ，假设一个类变量的定义为:
#+BEGIN_SRC java
  public static int value=123;
#+END_SRC
那变量value在准备阶段过后的初始值为 _0_ 而不是123, 因为这时候尚未开始执行任何Java方法,而把value賦值为123的 _putstatic_ 指令是程序被编译运,存放于类构造器 _<clinit>()_ 方法之中,所以把value賦值为123的动作将在 *初始化* 阶段才会执行。下表列出了Java中所有基本数据类型的零值

#+CAPTION: 基本数据类型的零值
#+ATTR_HTML: :border 1 :rules all :frame boader
| 数据类型  | 零值      |
| int       | 0         |
| long      | 0L        |
| short     | (short) 0 |
| char      | '\u0000'  |
| byte      | (byte) 0  |
| boolean   | false     |
| float     | 0.0f      |
| double    | 0.0d      |
| reference | null      |

如果类字段的字段属性表中存在 _ConstantValue_ 属性，那在 *准备* 阶段变量value就会被初始化为 _ConstantValue属性_ 所指定的值，假设上面类变量value的定义变为:

#+BEGIN_SRC java
  public static final int value = 123;
#+END_SRC
编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123

** 解析
