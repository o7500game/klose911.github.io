#+TITLE: 内存模型
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: jvm_example.html   
#+HTML_LINK_HOME: jvm.html
#+OPTIONS: num:nil timestamp:nil ^:nil


*多任务处理* 在现代计算机操作系统中几乎已是一项必备的功能了。在许多情况下，让计算机同时去做几件事情，不仅是因为计算机的运算能力强大了，还有一个很重要的原因是 *计算机的 _运算_ 速度与它的 _存储_ 和 _通信_ 子系统速度的差距太大* ，大量的时间都花费在 _磁盘I/O_ 、 _网络通信_ 或者 _数据库_ 访问上。如果不希望处理器在大部分时间里都处于等待其他资源的状态，就必须使用一些手段去把处理器的运算能力“压榨”出来，否则就会造成很大的浪费，而让计算机同时处理几项任务则是最容易想到、也被证明是非常有效的“压榨”手段

除了充分利用计算机处理器的能力外， *一个服务端同时对多个客户端* 提供服务则是另一个更具体的并发应用场景。衡量一个服务性能的高低好坏， *每秒事务处理数* ( _TPS_ )是最重要的指标之一，它代表着 *一秒内服务端平均能响应的请求总数* ，而TPS值与程序的并发能力又有非常密切的关系。对于计算量相同的任务，程序线程并发协调得越有条不紊，效率自然就会越高；反之，线程之间 _频繁阻塞_ 甚至 _死锁_ ，将会 *大大降低程序的并发能力* 


服务端是Java语言最擅长的领域之一，这个领域的应用占了Java应用中最大的一块份额，不过如何写好并发应用程序却又是服务端程序开发的难点之一，处理好并发方面的问题通常需要更多的编码经验来支持。幸好Java语言和虚拟机提供了许多工具，把并发编程的门槛降低了不少。并且各种中间件服务器、各类框架都努力地替程序员处理尽可能多的线程并发细节，使得程序员在编码时能更关注业务逻辑，而不是花费大部分时间去关注此服务会同时被多少人调用、如何协调硬件资源

但是无论语言、中间件和框架如何先进，开发人员都不能期望它们能独立完成所有并发处理的事情，了解并发的内幕也是成为一个高级程序员不可缺少的课程

#+BEGIN_EXAMPLE
  Amdahl定律通过系统中并行化与串行化的比重来描述多处理器系统能获得的运算加速能力

  摩尔定律则用于描述处理器晶体管数量与运行效率之间的发展关系

  这两个定律的更替代表了近年来硬件发展从追求处理器频率到追求多核心并行处理的发展过程
#+END_EXAMPLE
* 硬件的效率与一致性
  先花费一点时间去了解一下物理计算机中的 *并发* 问题
  #+BEGIN_EXAMPLE
    物理机遇到的并发问题与虚拟机中的情况有不少相似之处

    物理机对并发的处理方案对于虚拟机的实现也有相当大的参考意义
  #+END_EXAMPLE

  _让计算机并发执行若干个运算任务_ 与 _更充分地利用计算机处理器的效能_ 之间的因果关系，看起来顺理成章，实际上它们之间的关系并没有想象中的那么简单，其中一个重要的复杂性来源是 *绝大多数的运算任务都不可能只靠处理器 _计算_ 就能完成* ，处理器至少要与 *内存交互* ，如 _读取运算数据_ 、 _存储运算结果_ 等，这个I/O操作是很难消除的（无法仅靠寄存器来完成所有运算任务）。由于计算机的存储设备与处理器的运算速度有几个数量级的差距，所以现代计算机系统都不得不加入一层 *读写速度尽可能接近处理器运算速度的高速缓存* 来作为内存与处理器之间的缓冲：
  + 将运算 *需要使用到的数据复制到缓存* 中，让运算能快速进行
  + 当运算结束后再从 *缓存同步计算结果回内存* 之中，这样处理器就无须等待缓慢的内存读写了 

  基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也为计算机系统带来更高的复杂度，因为它引入了一个新的问题： *缓存一致性* 。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），如下图所示：

  #+ATTR_HTML: image :width 50% 
  [[file:pic/cache_coherence.png]] 

  #+BEGIN_EXAMPLE
    当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致

    如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？

    为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作

    这类协议有MSI、MESI、MOSI、Synapse、Firefly及Dragon Protocol等
  #+END_EXAMPLE
  以后将会多次提到的 _内存模型_ 一词，可以理解为 *在 _特定的操作协议_ 下，对 _特定的内存_ 或 _高速缓存_ 进行读写访问的过程抽象* 
  #+BEGIN_EXAMPLE
    不同架构的物理机器可以拥有不一样的内存模型，而Java虚拟机也有自己的内存模型

    这里介绍的内存访问操作与硬件的缓存访问操作具有很高的可比性
  #+END_EXAMPLE

  除了增加高速缓存之外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行 _乱序执行_ 优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其 *顺序性并不能靠代码的先后顺序来保证* 。与处理器的乱序执行优化类似，Java虚拟机的即时编译器中也有类似的 _指令重排序_ 优化
* JVM内存模型
  Java虚拟机规范中试图定义一种 _Java内存模型_ (JMM)来 *屏蔽掉各种硬件和操作系统的内存访问差异* ，以实现让Java程序在各种平台下都能达到一致的内存访问效果
  #+BEGIN_EXAMPLE
    在此之前，主流程序语言（如C/C++等）直接使用物理硬件和操作系统的内存模型

    由于不同平台上内存模型的差异，有可能导致程序在一套平台上并发完全正常，而在另外一套平台上并发访问却经常出错

    因此在某些场景就必须针对不同的平台来编写程序
  #+END_EXAMPLE

  定义Java内存模型并非一件容易的事情：
  + 这个模型必须定义得 *足够严谨* ，才能让Java的并发内存访问操作不会产生歧义
  + 也必须定义得 *足够宽松* ，使得虚拟机的实现有足够的自由空间去利用硬件的各种特性（寄存器、高速缓存和指令集中某些特有的指令）来获取更好的执行速度

  经过长时间的验证和修补，在 JDK 1.5（实现了 _JSR-133[2]_ ）发布后，Java内存模型已经成熟和完善起来了
** 主内存与工作内存 
   Java内存模型的主要目标是 *定义程序中各个变量的访问规则* ，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的 _变量_ 与 _Java编程中所说的变量_ 有所区别，它包括了 _实例字段_ 、 _静态字段_ 和 _构成数组对象的元素_ ，但不包括 *局部变量* 与 *方法参数* ，因为后者是 *线程私有的* ，不会被共享，自然就不会存在竞争问题
   #+BEGIN_EXAMPLE
     为了获得较好的执行效能

     Java内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互

     也没有限制即时编译器进行调整代码执行顺序这类优化措施
   #+END_EXAMPLE

   Java内存模型规定了 *所有的变量都存储在主内存* 中
   #+BEGIN_EXAMPLE
     此处的主内存与介绍物理硬件时的主内存名字一样，两者也可以互相类比，但此处仅是虚拟机内存的一部分
   #+END_EXAMPLE

   每条 *线程* 还有自己的 *工作内存* ：
   + 线程的工作内存中保存了被该线程使用到的 *变量的主内存副本拷贝*
   + 线程对变量的所有操作（ _读取_ 、 _赋值_ 等）都必须在 *工作内存* 中进行，而不能 *直接读写主内存中的变量*
   + *不同的线程* 之间也 *无法直接访问对方工作内存中的变量* ，线程间变量值的 *传递* 均需要通过 _主内存_ 来完成
   #+BEGIN_EXAMPLE
     可与前面讲的处理器高速缓存类比
   #+END_EXAMPLE

   线程、主内存、工作内存三者的交互关系如下图所示：
   #+ATTR_HTML: image :width 50% 
   [[file:pic/working_memory.png]] 


   注意：
   + 如果局部变量是一个 _reference_ 类型，它引用的对象在 *Java堆中可被各个线程共享* ，但是reference本身在 *Java栈的局部变量表* 中，它是 *线程私有的*
   + 拷贝副本，假设线程中访问一个10MB的对象，也会把这10MB的内存复制一份拷贝出来吗？ 事实上并不会如此， 这个 _对象的引用_ 、对象中 _某个在线程访问到的字段_ 是 *有可能存在拷贝* 的，但不会有虚拟机实现成把整个对象拷贝一次
   + *volatile* 变量依然有 *工作内存的拷贝* ，但是由于它 *特殊的操作顺序性* 规定，所以看起来如同直接在主内存中读写访问一般，因此这里的描述对于volatile也并不存在例外
   + 除了实例数据，Java堆还保存了对象的其他信息，对于HotSpot虚拟机来讲 
     + Mark Word
       + 存储对象哈希码
       + GC标志
       + GC年龄
       + 同步锁等信息
     + Klass Point : 指向存储类型元数据的指针
     + 字节对齐补白的填充数据 ： 如果实例数据刚好满足8字节对齐的话，则可以不存在补白
** 内存间交互操作
   关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了以下 *8种操作* 来完成，虚拟机实现时必须保证下面提及的 *每一种操作都是原子的、不可再分的* 
   #+BEGIN_EXAMPLE
     对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许有例外
   #+END_EXAMPLE
   + *lock* （锁定）：作用于 _主内存_ 的变量，它把一个变量 *标识为一条线程独占* 的状态
   + *unlock* （解锁）：作用于 _主内存_ 的变量，它把一个处于 *锁定状态的变量释放* 出来，释放后的变量才可以被 _其他线程_ 锁定
   + *read* （读取）：作用于 _主内存_ 的变量，它把一个变量的值从 *主内存传输到线程的工作内存* 中，以便随后的 _load_ 动作使用
   + *load* （载入）：作用于 _工作内存_ 的变量，它把 _read_ 操作从主内存中得到的 *变量值放入工作内存的变量副本* 中
   +  *use* （使用）：作用于 _工作内存_ 的变量，它把工作内存中一个 *变量的值传递给执行引擎* ，每当虚拟机遇到一个 _需要使用到变量的值_ 的字节码指令时将会执行这个操作
   + *assign* （赋值）：作用于 _工作内存_ 的变量，它把一个 *从执行引擎接收到的值赋给工作内存的变量* ，每当虚拟机遇到一个给 _变量赋值_ 的字节码指令时执行这个操作
   + *store* （存储）：作用于 _工作内存_ 的变量，它把工作内存中一个 *变量的值传送到主内存* 中，以便随后的 _write_ 操作使用
   + *write* （写入）：作用于 _主内存_ 的变量，它把 _store_ 操作从 *工作内存中得到的变量的值放入主内存的变量* 中

*** 执行顺序
    + 如果要把一个变量从 *主内存复制到工作内存* ，那就要 *顺序地执行 _read_ 和 _load_ 操作*
    + 如果要把变量从 *工作内存同步回主内存* ，就要 *顺序地执行 _store_ 和 _write_ 操作* 

    #+BEGIN_EXAMPLE
      注意，Java内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行

      也就是说，read与load之间、store与write之间是可插入其他指令的

      如对主内存中的变量a、b进行访问时，一种可能出现顺序是read a、read b、load b、load a
    #+END_EXAMPLE

    除此之外，Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：
    + 不允许 _read_ 和 _load_ 、 _store_ 和 _write_ 操作之一 *单独出现* ，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现
    + 不允许一个线程丢弃它的最近的assign操作，即变量在 *工作内存中改变了之后必须把该变化同步回主内存*
    + 不允许一个线程无原因地， *没有发生过任何 _assign_ 操作* ，把数据从线程的 *工作内存同步回主内存中*
    + 一个 *新的变量只能在主内存中诞生* ，不允许在工作内存中直接使用一个 *未被初始化* （ _load_ 或 _assign_ ）的变量，换句话说，就是 *对一个变量实施 _use_ 、 _store_ 操作之前，必须先执行过了 _assign_ 和 _load_ 操作*
    + 一个变量在 *同一个时刻只允许 _一条线程_ 对其进行 _lock_ 操作* 
      + 但 _lock_ 操作可以被 _同一条线程_  *重复执行多次* ，多次执行 lock 后，只有 *执行相同次数的 _unlock_ 操作* ，变量才会被解锁
      + 如果对一个变量执行 _lock_ 操作，那将会 *清空工作内存中此变量的值* ，在 _执行引擎_ 使用这个变量前，需要 *重新执行 _load_ 或 _assign_ 操作* 初始化变量的值
    + 如果一个变量 *事先没有被 _lock_ 操作锁定* ，那就 *不允许对它执行 _unlock_ 操作* ，也 *不允许去 unlock 一个 _被其他线程_ 锁定* 住的变量
      + 对一个变量执行 _unlock_ 操作之前，必须 *先把此变量同步回主内存中* ，也就是执行 _store_ 、 _write_ 操作

    #+BEGIN_EXAMPLE
       基于理解难度和严谨性考虑，最新的JSR-133文档中，已经放弃采用这8种操作去定义Java内存模型的访问协议了

      仅是描述方式改变了，Java内存模型并没有改变
    #+END_EXAMPLE

** volatile型变量的特殊规则
* JVM线程实现
