#+TITLE: 内存模型
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: jvm_example.html   
#+HTML_LINK_HOME: jvm.html
#+OPTIONS: num:nil timestamp:nil ^:nil


*多任务处理* 在现代计算机操作系统中几乎已是一项必备的功能了。在许多情况下，让计算机同时去做几件事情，不仅是因为计算机的运算能力强大了，还有一个很重要的原因是 *计算机的 _运算_ 速度与它的 _存储_ 和 _通信_ 子系统速度的差距太大* ，大量的时间都花费在 _磁盘I/O_ 、 _网络通信_ 或者 _数据库_ 访问上。如果不希望处理器在大部分时间里都处于等待其他资源的状态，就必须使用一些手段去把处理器的运算能力“压榨”出来，否则就会造成很大的浪费，而让计算机同时处理几项任务则是最容易想到、也被证明是非常有效的“压榨”手段

除了充分利用计算机处理器的能力外， *一个服务端同时对多个客户端* 提供服务则是另一个更具体的并发应用场景。衡量一个服务性能的高低好坏， *每秒事务处理数* ( _TPS_ )是最重要的指标之一，它代表着 *一秒内服务端平均能响应的请求总数* ，而TPS值与程序的并发能力又有非常密切的关系。对于计算量相同的任务，程序线程并发协调得越有条不紊，效率自然就会越高；反之，线程之间 _频繁阻塞_ 甚至 _死锁_ ，将会 *大大降低程序的并发能力* 


服务端是Java语言最擅长的领域之一，这个领域的应用占了Java应用中最大的一块份额，不过如何写好并发应用程序却又是服务端程序开发的难点之一，处理好并发方面的问题通常需要更多的编码经验来支持。幸好Java语言和虚拟机提供了许多工具，把并发编程的门槛降低了不少。并且各种中间件服务器、各类框架都努力地替程序员处理尽可能多的线程并发细节，使得程序员在编码时能更关注业务逻辑，而不是花费大部分时间去关注此服务会同时被多少人调用、如何协调硬件资源

但是无论语言、中间件和框架如何先进，开发人员都不能期望它们能独立完成所有并发处理的事情，了解并发的内幕也是成为一个高级程序员不可缺少的课程

#+BEGIN_EXAMPLE
  Amdahl定律通过系统中并行化与串行化的比重来描述多处理器系统能获得的运算加速能力

  摩尔定律则用于描述处理器晶体管数量与运行效率之间的发展关系

  这两个定律的更替代表了近年来硬件发展从追求处理器频率到追求多核心并行处理的发展过程
#+END_EXAMPLE
* 硬件的效率与一致性
  先花费一点时间去了解一下物理计算机中的 *并发* 问题
  #+BEGIN_EXAMPLE
    物理机遇到的并发问题与虚拟机中的情况有不少相似之处

    物理机对并发的处理方案对于虚拟机的实现也有相当大的参考意义
  #+END_EXAMPLE

  _让计算机并发执行若干个运算任务_ 与 _更充分地利用计算机处理器的效能_ 之间的因果关系，看起来顺理成章，实际上它们之间的关系并没有想象中的那么简单，其中一个重要的复杂性来源是 *绝大多数的运算任务都不可能只靠处理器 _计算_ 就能完成* ，处理器至少要与 *内存交互* ，如 _读取运算数据_ 、 _存储运算结果_ 等，这个I/O操作是很难消除的（无法仅靠寄存器来完成所有运算任务）。由于计算机的存储设备与处理器的运算速度有几个数量级的差距，所以现代计算机系统都不得不加入一层 *读写速度尽可能接近处理器运算速度的高速缓存* 来作为内存与处理器之间的缓冲：
  + 将运算 *需要使用到的数据复制到缓存* 中，让运算能快速进行
  + 当运算结束后再从 *缓存同步计算结果回内存* 之中，这样处理器就无须等待缓慢的内存读写了 

  基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也为计算机系统带来更高的复杂度，因为它引入了一个新的问题： *缓存一致性* 。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），如下图所示：

  #+ATTR_HTML: image :width 50% 
  [[file:pic/cache_coherence.jpg]] 

  #+BEGIN_EXAMPLE
    当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致

    如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？

    为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作

    这类协议有MSI、MESI、MOSI、Synapse、Firefly及Dragon Protocol等
  #+END_EXAMPLE
  以后将会多次提到的 _内存模型_ 一词，可以理解为 *在 _特定的操作协议_ 下，对 _特定的内存_ 或 _高速缓存_ 进行读写访问的过程抽象* 
  #+BEGIN_EXAMPLE
    不同架构的物理机器可以拥有不一样的内存模型，而Java虚拟机也有自己的内存模型

    这里介绍的内存访问操作与硬件的缓存访问操作具有很高的可比性
  #+END_EXAMPLE

  除了增加高速缓存之外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行 _乱序执行_ 优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其 *顺序性并不能靠代码的先后顺序来保证* 。与处理器的乱序执行优化类似，Java虚拟机的即时编译器中也有类似的 _指令重排序_ 优化
* JVM内存模型

* JVM线程实现
