#+TITLE: zuul网关客户化
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil

* 服务注册和发现
** 配置文件
zuul本身是通过配置文件来初始化zuul的路由映射：
#+BEGIN_SRC sh
  zuul.routes.kibana.path=/logcenter/**
  zuul.routes.kibana.url=http://172.25.17.74:5621/
#+END_SRC
#+BEGIN_EXAMPLE
  假如http://172.25.17.74:7070 是网关地址

  那么访问http://172.25.17.74:7070/logcenter/ 会路由到http://172.25.17.74:5621/
#+END_EXAMPLE

** 自动注册
1. Java的微服务依赖的 _ebao-spring-boot-starter-discoveryendpoint_ 这个starter插件，微服务启动后，往redis发布一条消息
2. redis收到消息后，会广播给所有也依赖这个插件的服务
3. zuul网关收到redis的广播，更新zuul的路由映射

#+BEGIN_EXAMPLE
  未来会不用这种服务注册方式，k8s提供了对每个service的dns支持

  每个service的路由信息，可以通过配置写在application.properties文件中
#+END_EXAMPLE

** swagger文件导入
1. 通过swagger文件把服务导入到admin-service的数据库内：这个功能不在网关服务内
2. 网关定时调用admin-service的rest接口，把数据库的API信息更新到zuul网关
   + admin-service提供的rest接口： /rest/v1/vendor/service/list/all
   + 网关同步API信息：com.ebao.cloud.gateway.route.RefreshVendorRunner#refresh 
     + com.ebao.cloud.gateway.integration.VenderPath中比较重要的字段：
       + frompath:  API注册到网关后，别人调用网关的路径
       + toPath: API在后台服务器上真实的路径
       + vendorCode：把API注册到网关的租户
       + version：API的版本号
       + enableAuth：是否需要网关做安全认证
       + enableCors：是否需要网关支持跨域访问
       + routeNodes：后台服务器的地址
       + attributes: 支持可扩展字段的Map
   + API信息转换成Zuul路由信息： 把VendorPath 转换成 VenderRoute
     + VendorRoute继承于org.springframework.cloud.netflix.zuul.filters.Route， 这是Zuul网关中的一个路由对象
     + 需要注意的是 Route对象的location字段
       + 如果值是一个域名，请求会被通过SimpleHostRoutingFilter基于dns做路由
       + 反之则会调用RibbonRoutingFilter基于客户端的负载均衡器做路由
   + 把VendorRoute放入到com.ebao.cloud.gateway.route.TenantRouteLocator#cachedVenderRoutes这个Map
3. 当请求到来时，路径信息和http方法匹配后，把请求路由到后台服务器
   + 某个服务暴露在网关的url是： _${gw-url}/${vendorCode}/${version}/${fromPath}_ 
     + ${gw-url} 是网关的域名：比如 https://dev-gw.ebaocloud.com ， 也可以是 https://dev.ebaocloud.com/api 
   + 路由匹配的入口： com.ebao.cloud.gateway.route.TenantRouteLocator#getMatchingRoute 
     + 路由匹配支持通配符和path变量：匹配器使用的是spring提供的AntPathMatcher
       + 注意：通配符path变量匹配成功后，因为数据库保存的是类似于/aaa/${id} 这种形式，实际路由请求的后台路径需要做变量替换
       + 可以从VenderRouteUtilsTest这个ut类开始阅读
       + 这里算法实现应该有很大的优化空间
   + 后台服务器地址保存在admin-service的t_maf_vendor_service.route_nodes字段

* 自定义ZuulFilter
** pre 
*** CorsPreFlightFilter 

处理跨域访问Options请求：
+ 优先级：10
+ 生效条件： 同时满足下面几个 
  1. 注册上来的服务根据enableCors标志位判断，其他API默认都生效
  2. 请求的origin头不为空
  3. 请求是Options方法
  4. 请求的"Access-Control-Request-Method不为空
+ 处理逻辑：响应中添加 Access-Control-Allow-Origin， Access-Control-Allow-Methods， Access-Control-Allow-Headers头

*** AuthCheckFilter 
做安全认证

+ 优先级：20
+ 不生效条件：满足下面任一一个
  + 某些http方法不需要校验，比如Options
  + ebao.gateway.security.ignore.urls 配置变量中包含的路径不需要校验
  + admin-service中注册的API，如果enableAuth为false不需要检验
+ 处理逻辑：
  + 如果是token的安全认证（basic，jwt，oauth2），先从redis中取缓存
  + 缓存无法取到或者不是基于token的安全认证，则调用auth服务的rest接口，并把认证结果放入到redis做缓存
  + 如果认证成功，获得用户名，把用户名，租户代码，以及用户对象缓存到Zuul的RequestContext中（RequestContext相当于请求级别的缓存区）
  + 如果认证失败，响应返回码401，内容："auth check failed"

*** LogMDCFilter 
把缓存在RequestContext中的租户代码等信息放入logback的MDC中，这样日志中就能体现这些信息

+ 优先级：25

*** RedisRateLimitFilter 
检查用户和租户调用API的速率是否超过预设的阀值 
+ 优先级：27 
+ 生效条件：配置参数ebao.gateway.limit.api-rate-limit-enable是否为真
+ 业务逻辑：把相关租户，用户的调用统计放到redis中，过期时间是一个窗口
  + 租户和用户的页面上有相关配置信息，具体可以看网关的使用手册
  + 如果校验结果超出预设的阀值：中断请求，返回状态码429

*** RequestCacheFilter 
把用户，租户等信息放入到ThreadLocal中

#+BEGIN_EXAMPLE
  接下来如果网关要调用其他微服务的时候，netflixext这个starter能够从ThreadLocal获取到这些信息，并放入到http请求的相关头部中

  这样一来整个链路的应用都能获取到租户，用户等信息

  其实前面已经把这部分信息放入到RequestContext中，但是netflixext starter是面向所有应用编写的，没有为网关做定制

  当然网关中也可以用RequestContext来改写netflixext starter中客户化Feign，RestTemplate的获取信息的逻辑，似乎这样做更合理
#+END_EXAMPLE

优先级：28

*** APIPermissionCheckFilter 
检查调用者是否有权限调用注册在网关上的API（仅限于admin-service注册的服务） 
+ 优先级：30
+ 生效条件：满足下面所有的条件才生效
  1. 某些http方法不需要做权限认证，这个和安全认证中逻辑类似
  2. 调用者租户代码不为空
     + 如果为空，实际上是后台服务器去做安全认证，网关如果不做安全认证，就不知道调用者是谁，所以也没法做权限认证
  3. 注册在admin-service的服务
+ 权限认证不通过，中断请求，返回状态码403，报错信息："api permission check failed"

*** TenantCheckFilter 
校验用户手动从http请求头传的tenantCode和安全认证token对应的用户的租户代码是否一致

+ 优先级：40
+ 生效条件：请求头中的x-ebao-tenant-id不为空，并且安全认证获得的账户名不为空
+ 如果两者校验不匹配，中断请求，返回状态码403, 报错信息："tenant check failed"
*** RequestHeaderFilter
路由http请求前，把租户，用户等信息放到请求头内，后台服务器可以获得这些信息 

+ 优先级：55
+ 生效条件： 通过前面的所有的校验

*** APIFactoryRequestFilter 
转发请求给apifactory服务 
+ 优先级：60
+ 生效条件：VendorRoute对象的isVirtual属性为真（admin-service数据库里面的swagger扩展字段中有这么一个标志位）
+ 业务逻辑：根据apifactory-service 的invoke rest接口来创建http请求，手动调用apifacory-service的invoke接口

#+BEGIN_EXAMPLE
  接下来会重构APIFactoryService，所以这个Filter可能要完全改写，所以没必要去细究细节
#+END_EXAMPLE

** post 

*** CorsReponseFilte 
跨域访问的reponse的header中都必须加上“Access-Control-Allow-Origin”
+ 优先级: -10
+ 过滤条件：请求是跨域访问
+ 处理逻辑：如果response的header中没有“Access-Control-Allow-Origin”字段，那么在其中设置Access-Control-Allow-Origin为 *

#+BEGIN_EXAMPLE
  注意：reponse的header中的Access-Control-Allow-Origin不能有多个值叠加，浏览器会报错

  这种情况主要出现在：网关做了跨域支持，后台服务器也做了跨域支持，

  从后台服务器返回的响应中已经加入了Access-Control-Allow-Origin字段，所以需要校验是否已经存在这个字段
#+END_EXAMPLE

*** APIFactoryResponseFilter
#+BEGIN_EXAMPLE
  apifactory service的invoke返回的响应是一个json的body，这个body包含了返回给客户的状态码，请求头，body

  所以网关需要重新组装返回给真实客户的响应
#+END_EXAMPLE

+ 优先级: 990 

*** ResponseHeaderFilter 
把租户，用户，以及调用者IP等信息写入到响应的请求头中
#+BEGIN_EXAMPLE
  主要目的是：tomcat 的access log可以方便的打印出请求头中的这些信息

  未来如果不靠tomcat的access log日志来做统计，这个Filter可以删除掉
#+END_EXAMPLE
+ 优先级：995

** error  类型

*** CustomErrorFilter 
这里的逻辑和ResponseHeaderFilter一样

#+BEGIN_EXAMPLE
  zuul 的post类型中有一个SendErrorFilter，它的优先级是0，在那里就会直接把错误响应发送给客户端，所以ResponseHeaderFilter的逻辑根本走不到

  这也就是为什么CorsReponseFilter的优先级被定义为-10， 它必须在SendErrorFilter之前被执行，才能兼容出错的情况

  没有把ResponseHeaderFilter的优先级也定义成负数的原因是：

  后面的APIFactoryResponseFilter会重新生成响应，这种情况下，哪怕前面加了，也会丢失。因此是把它放到了最后去做

  当然也可以把它和CorsReponseFilter一样处理，然后在APIFactoryResponseFilter中手动增加这部分逻辑
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  这个filter实际上还有一个作用是分析错误堆栈，找出真正的有意义的出错原因返回给客户

  以前这部分代码经常出错，后来我就手动注释掉了，保证可用
#+END_EXAMPLE

* 配置信息
** 限流和熔断
#+BEGIN_EXAMPLE
  zuul.host.max-per-route-connections=500 # 每个后台服务器最多建立500个socket连接
  zuul.host.max-total-connections=1000 # 整个zuul服务器最多建立1000个socket连接

  hystrix.command.default.execution.isolation.strategy=SEMAPHORE # hystrix 基于信号量做限流
  hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests=100000 # 每个请求需要获得一个信号量，当信号量用完了也就无法响应请求

  hystrix.command.default.circuitBreaker.enabled=false # 没有开启熔断
  hystrix.command.default.fallback.enabled=false # 也没有开启熔断后的fallback处理机制

  ribbon.circuit.enabled=false # ribbon 客户端负载均衡关闭熔断
#+END_EXAMPLE

实际生产运行时hystrix几乎没有限流和熔断

#+BEGIN_EXAMPLE
  feign.hystrix.enabled=false # 通过feign调用rest请求，不使用hystrix
#+END_EXAMPLE

原因：如果feign使用hystrix，可能会开启新的线程，导致通过ThreadLocal传递租户代码失败

#+BEGIN_EXAMPLE
  ebao.gateway.limit.user-api-interval-seconds=60 # 每个用户的统计时间窗口是60秒
  ebao.gateway.limit.user-api-throttle=1200  # 限制每个用户在一个时间窗口调用的阀值是1200次
  ebao.gateway.limit.tenant-api-interval-seconds=60 # 每个租户的统计时间窗口是60秒
  ebao.gateway.limit.tenant-api-throttle=6000 # 每个租户在一个时间窗口调用的阀值是6000次
#+END_EXAMPLE

这些是对于每个用户/租户的默认值，可以在用户/租户配置页面对一个特定用户/租户手动修改
** 超时
#+BEGIN_EXAMPLE
  zuul.host.socket-timeout-millis=120000 # SimpleHostRoutingFilter的超时是120000ms，2分钟
  ribbon.ReadTimeout=120000 # 基于RibbonRoutingFilter的超时也是120000ms，2分钟

  hystrix.command.default.execution.timeout.enabled=false # hystrix的超时被关闭
  hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=120000 # hystrix线程级别的超时，实际上没用
#+END_EXAMPLE

每个生产环境可能在配置中心有自己的客户化配置
** 重试
#+BEGIN_EXAMPLE
  zuul.retryable=true # zuul 支持重试
  ribbon.MaxAutoRetries=0 # 每个服务器重试的次数
  ribbon.MaxAutoRetriesNextServer=3 # 重试下一个服务器的次数
#+END_EXAMPLE

支持基于ribbon的出错重试机制
** httptrace
#+BEGIN_EXAMPLE
  ebao.platform.httptrace.enableTrace=true

  ebao.platform.httptrace.traceViewBaseUrl=${platform.domainname}
  ebao.platform.httptrace.traceViewPath=/pinpoint_web/trace/${traceid}.pinpoint
#+END_EXAMPLE

** misc
#+BEGIN_EXAMPLE
  zuul.sslHostnameValidationEnabled=true # 后台服务器如果是https，是否要校验证书的有效性
#+END_EXAMPLE

注意：这个参数对SimpleRoutingFilter有效，对RibbonRoutingFilter路由方式无效

#+BEGIN_EXAMPLE
  zuul.sensitive-headers= # 发送给网关请求中的header里面哪些字段不用传递给后台服务器
#+END_EXAMPLE

比如：网关做了安全认证后，请求中的Authorization头就不应该再继续传递给后台服务器

这里留空的原因：有些后台服务自己做安全认证，这里不能一刀切地把Authorization头禁了。万一有这方面的要求，可以在创建路由对象时设置相应的ignoreHeaders字段来满足需求： 
#+BEGIN_SRC java 
  public VenderRoute convert(VenderPath venderPath) {
	  // route fields
	  VenderRoute route = new VenderRoute(
		  String.valueOf(venderPath.getId()),
		  buildPath(venderPath),
		  venderPath.getNodes(),
		  "",
		  true,
		  venderPath.getIgnoreHeaders());
  // .......
  }
#+END_SRC 
venderPath对象的ignoreHeaders信息来自于注册在admin-service数据库里swagger文件的扩展字段

* 常见报错
1. 路由请求时报出connection timeout ： 一般是和后台服务器建立socket连接超时（默认是2秒） 
2. 路由请求时报出read timeout：得到后台服务器响应时间超时（默认是120秒）
3. 路由请求是报出 connection reset : 后台服务器已经关闭了socket连接，网关不知道，一般是后台服务器不支持http长连接导致
4. 请求返回401 auth check failed: 身份认证未通过
5. 请求返回403 api permission check failed：权限校验未通过
6. 请求返回403 tenant check failed: 请求中的x-ebao-tenant-id和authorization头对应的租户不匹配
7. 如果注册在网关上的api是文件上传这种multipart的服务，body超过2M，会报错，这个时候需要在路径里加上zuul前缀
   + 比如：https://dev.ebaocloud.com/api/data-collection-service/upload 需要写成 https://dev.ebaocloud.com/api/zuul/data-collection-service/upload
8. 后台服务器的https证书会有问题 

* 问题和改进
+ 去掉自定义的服务注册和发现机制：这些服务的路由信息可以暂时通过配置文件来获取
+ 权限校验应该基于用户，而不是租户
+ 并发的效率不高，测试结果显示单节点同时处理50个请求时候效率最高，200个并发请求再往上，响应变得非常慢
#+BEGIN_EXAMPLE
  升级到支持nio的zuul2试试，或选择基于go的网关中间件
#+END_EXAMPLE
+ 出错时报错信息很不直观
#+BEGIN_EXAMPLE
  CustomErrorFilter应该自己组装对应的报错响应

  但从一大堆的异常堆栈检索到真正有用的报错信息不好做
#+END_EXAMPLE

+ ebao.gateway.security.ignore.urls 现在的值已经太长了，应该改成列表的形式
