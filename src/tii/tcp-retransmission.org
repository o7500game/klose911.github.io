#+TITLE: TCP：超时和重传
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: tcp-bucket-transmission.html   
#+HTML_LINK_HOME: tii.html
#+OPTIONS: num:nil timestamp:nil  ^:nil

TCP提供可靠的运输层。它使用的方法之一就是确认从另一端收到的数据。但数据和确认都有可能会丢失。TCP通过在发送时 *设置一个定时器* 来解决这种问题。如果当定时器溢出时还没有收到确认，它就重传该数据。对任何实现而言，关键之处就在于 *超时和重传的策略* ，即怎样决定超时间隔和如何确定重传的频率

已经看到过两个超时和重传的例子：
+ ICMP端口不能到达的例子中，看到TFTP客户使用UDP实现了一个简单的超时和重传机制：假定5秒是一个适当的时间间隔，并每隔5秒进行重传
+ 在向一个不存在的主机发送ARP的例子中，当TCP试图建立连接的时候，在每个重传之间使用一个较长的时延来重传SYN
  
对每个连接，TCP管理4个不同的定时器：
1. *重传* 定时器：当希望收到另一端的确认。在本章将详细讨论这个定时器以及一些相关的问题，如拥塞避免
2. *坚持* 定时器：使窗口大小信息保持不断流动，即使另一端关闭了其接收窗口
3. *保活* 定时器：可检测到一个空闲连接的另一端何时崩溃或重启
4. *2MSL* 定时器：测量一个连接处于TIME_WAIT状态的时间，已经介绍过了
   
本章以一个简单的TCP超时和重传的例子开始，然后转向一个更复杂的例子。该例子可以观察到TCP时钟管理的所有细节。看到TCP的典型实现是怎样测量TCP报文段的往返时间以及TCP如何使用这些测量结果来为下一个将要传输的报文段建立重传超时时间。接着将研究TCP的 *拥塞避免* ：当分组丢失时TCP所采取的动作，并提供一个分组丢失的实际例子。最后将介绍较新的 *快速重传* 和 *快速恢复* 算法，并介绍该算法如何使TCP检测分组丢失比等待时钟超时更快

* 简单例子
  首先观察TCP所使用的重传机制，先将建立一个连接，发送一些分组来证明一切正常，然后拔掉电缆，发送更多的数据，再观察TCP的行为：
  
  #+ATTR_HTML: image :width 70% 
  [[file:pic/tcp-retransmission-simple-example.png]]
  
  图21-1表示的是tcpdump的输出结果：
  
  #+ATTR_HTML: image :width 70% 
  [[file:pic/tcp-retransmission-simple-dump.png]]
  
+ 第1、2和3行：正常的TCP连接建立的过程
+ 第4行："hello,world"（12个字符加上回车和换行）的传输过程
+ 第5行：其确认
+ svr4拔掉了以太网电缆
+ 第6行："and hi"将被发送
+ 第7~18行：这个报文段的 *12次重传* 
+ 第19行：发送方的TCP最终放弃并发送一个 *RST信号*
  
** 指数退避
   检查连续重传之间不同的时间差，它们取整后分别为1、3、6、12、24、48和多个64秒。后面将看到当第一次发送后所设置的超时时间实际上为1.5秒（它在首次发送后的1.0136秒而不是精确的1.5秒后，发生的原因已经解释过），此后该时间在每次重传时增加1倍并直至64秒
   
   这个倍乘关系被称为 *指数退避* 。可以将该例子与TFTP例子比较，在那里每次重传总是在前一次的5秒后发生 
   
   首次分组传输（第6行，24.480秒）与复位信号传输（第19行，566.488秒）之间的时间差约为 *9分钟* 
   
* 往返时间测量
TCP超时与重传中最重要的部分就是对一个给定连接的往返时间 *RTT* 的测量。由于路由器和网络流量均会变化，因此这个时间可能经常会发生变化，TCP应该跟踪这些变化并相应地改变其超时时间

** RTO计算
*** 平均值修正
首先TCP必须测量在发送一个带有特别序号的字节和接收到包含该字节的确认之间的RTT。在上一章中，曾提到在数据报文段和ACK之间通常并没有一一对应的关系。这意味着发送方可以测量到的一个RTT，例如在图20-1中在发送报文段4（第1~1024字节）和接收报文段7（对1~1024字节的ACK）之间的时间，用M表示所测量到的RTT

最初的TCP规范TCP使用低通过滤器来更新一个基于平均值的RTT修正值（从0开始）：

/R/ \gets \alpha /R/ + (1 - \alpha) /M/


这里的 \alpha 是一个推荐值为 *0.9* 的平滑因子。每次进行新测量的时候，这个被平滑的RTT将得到更新。每个新估计的90％来自前一个估计，而10%则取自新的测量

该算法在给定这个随RTT的变化而变化的平滑因子的条件下，RFC793推荐的重传超时时间RTO的值应该设置为：

/RTO/ = /R/ \beta

这里的 \beta 是一个推荐值为 *2* 的时延离散因子

*** 基于均值和方差
在RTT变化范围很大时，使用这个方法无法跟上这种变化，从而引起不必要的重传。当网络已经处于饱和状态时， *不必要的重传会增加网络的负载* ，对网络而言这就像在火上浇油一样

除了RTT平均值，所需要做的还有跟踪RTT的 *方差* 。在往返时间变化起伏很大时，基于 *均值和方差* 来计算RTO，将比作为均值的常数倍数来计算RTO能提供更好的响应

 *均值偏差* 是对标准偏差的一种好的逼近，但却更容易进行计算（计算标准偏差需要一个平方根）。这就引出了下面用于每个RTT测量M的公式：

/Err/ = /M/ - /A/ 

/A/ \gets /A/ + /gErr/ 

/D/ \gets /D/ + /h(/ | /Err/ | - /D)/

/RTO/ = /A/ + 4 /D/ 

这里的 /A/ 是RTT平均值的修正值，而 /D/ 则是被平均的均值偏差。 /Err/ 是刚得到的测量结果与当前的RTT估计器之差。 /A/ 和 /D/ 均被用于计算下一个重传时间。增量 /g/ 起平均作用，取为 *1/8* 。偏差的增益是 /h/ ，取值为 *0.25* 。当RTT变化时，较大的偏差增益将使RTO快速上升

#+BEGIN_EXAMPLE
  最早在计算RTO时使用2D，但经过后来更深入的研究，后来该值改为4D，也就是在BSD Net/1的实现中使用的那样
#+END_EXAMPLE

这种算法可以使用整数运算来计算这些公式，并被许多实现所采用

#+BEGIN_EXAMPLE
  这也就是g，h和倍数4均是2的乘方的一个原因，这样一来计算均可只通过移位操作而不需要乘、除运算来完成

#+END_EXAMPLE 

与最初的方法比较，发现被平滑的均值计算公式是类似的（ \alpha 是1减去增益g），而增益可使用不同的值。而且Jacobson计算RTO的公式依赖于被平滑的RTT和被平滑的均值偏差，而最初的方法则使用了被平滑的RTT的一个倍数

** Karn算法
在一个分组重传时会产生这样一个问题：假定一个分组被发送。当超时发生时，RTO如第一个例子中显示的那样进行延长，分组以更长的RTO进行重传，然后收到一个确认。那么这个ACK是针对第一个分组的还是针对第二个分组呢？这就是所谓的 *重传多义性问题* :
+ 当一个超时和重传发生时，在重传数据的确认最后到达之前，不能更新RTT估计器，因为并不知道ACK对应哪次传输（也许第一次传输被延迟而并没有被丢弃，也有可能第一次传输的ACK被延迟）
+ 如果数据被重传，RTO已经得到了一个指数延长，在下一次传输时使用这个延长后的RTO
+ 对一个没有被重传的报文段而言，除非收到了一个确认，否则不要计算新的RTO


** 往返时间RTT的例子
将使用以下这些例子来检查TCP的超时和重传、慢启动以及拥塞避免等方方面面的实现细节

使用sock程序和如下的命令来将32768字节的数据从主机slip发送到主机vangogh.cs.berkeley.edu上的discard服务：

#+BEGIN_SRC sh
  slip$ sock -D -i -n32 vangogh.cs.berkeley.edu discard
#+END_SRC

slip通过两个SLIP链路与140.252.1以太网相连，并从这里通过Internet到达目的地。通过使用两个9600b/s的SLIP链路，期望能够得到一些可测量的时延

该命令执行32个写1024字节的操作。由于slip和bsdi之间的MTU为296字节，因此这些操作会产生128个报文段，每个报文段包含256字节的用户数据。整个传输过程的时间约为45秒，可以观察到了一个超时和三次重传

当该传输过程进行时，在slip上使用tcpdump来截获所有的发送和接收的报文段，并通过使用 *-D* 选项来打开socket debug功能，这样便可以通过运行一个修改后的trpt(8)程序来打印出连接控制块中与RTT、慢启动及拥塞避免等有关的多个变量

图21-2显示的是前5秒中的数据和确认的传输过程。虽然仅能够在运行tcpdump的主机上测量分组发送和接收的时间，但在本图中希望显示出分组正在网络中传输（它们确实存在，因为这个局域网连接与共享式的以太网并不一样）以及接收主机何时可能产生ACK

  #+ATTR_HTML: image :width 70% 
  [[file:pic/tcp-slip-vangogh-discard-dump.png]]

注意：在本图中已经将报文段按照在主机slip上发送和接收的序号记为1~13和15。这与在这个主机上所收集的tcpdump的输出结果有关
