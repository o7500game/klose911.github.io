#+TITLE: Bootp：引导程序协议
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: tftp.html   
#+HTML_LINK_HOME: tii.html
#+OPTIONS: num:nil timestamp:nil  ^:nil

曾经介绍了一个无盘系统，它在不知道自身IP地址的情况下，在进行系统引导时能够通过RARP来获取它的IP地址。然而使用RARP有两个问题：
1. IP地址是返回的唯一结果
2. 既然RARP使用链路层广播，RARP请求就不会被路由器转发（迫使每个实际网络设置一个RARP服务器）

本章将介绍一种用于无盘系统进行系统引导的替代方法，又称为BOOTP引导程序协议

BOOTP使用UDP，且通常需与TFTP协同工作。RFC 951是BOOTP的正式规范，RFC 1542则对它作了说明

* BOOTP协议

** 报文
BOOTP请求和应答均被封装在UDP数据报中，如图16-1所示：
  #+ATTR_HTML: image :width 70% 
  [[file:pic/udp-bootp-packet.png]]

图16-2显示了长度为300字节的BOOTP请求和应答的格式：
  #+ATTR_HTML: image :width 70% 
  [[file:pic/bootp-packet.png]]

*** 操作码字段
+ 1: 请求
+ 2: 应答

*** 硬件类型字段
+ 1: 10Mb/s的以太网，这和ARP请求或应答中同名字段表示的含义相同


*** 硬件地址长度字段
类似地对于以太网为6字节

*** 跳数字段
由客户设置为0，但也能被一个代理服务器设置

*** 事务标识字段
由客户设置并由服务器返回的32bit整数。客户用它对请求和应答进行匹配。对每个请求，客户应该将该字段设置为一个随机数

*** 秒数字段
客户开始进行引导时，将 *秒数* 字段设置为一个时间值。服务器能够看到这个时间值，备用服务器在等待时间超过这个时间值后才会响应客户的请求，这意味着主服务器没有启动 

*** 客户IP地址字段
如果该客户已经知道自身的IP地址，它将写入 *客户IP地址* 字段。否则，它将该字段设置为0

*** 你的IP字段字段
服务器把该客户的IP地址写入 *你的IP地址* 字段

*** 服务器IP地址字段
由服务器填写

*** 网关IP地址字段
如果使用了某个代理服务器，则该代理服务器就填写 *网关IP地址* 字段

*** 客户硬件地址字段
客户必须设置它的 *客户硬件地址* 字段。尽管这个值与以太网数据帧头中的值相同，UDP数据报中也设置这个字段，但任何接收这个数据报的用户进程能很容易地获得它。一个进程通过查看UDP数据报来确定以太网帧首部中的该字段通常是很困难的（或者说是不可能的）

*** 服务器主机名字段
一个空值终止串，由服务器填写

*** 引导文件名字段
服务器还将在 *引导文件名字段* 填入包括用于系统引导的文件名及其所在位置的路径全名

*** 特定厂商区域字段
用于对BOOTP进行不同的扩展

#+BEGIN_EXAMPLE
当一个客户使用BOOTP（操作码为1）进行系统引导时，引导请求通常是采用链路层广播：
  IP首部中的目的IP地址为255.255.255.255，源IP地址通常是0.0.0.0

因为此时客户还不知道它本身的IP地址。在系统进行自引导时，0.0.0.0是一个有效的IP地址
#+END_EXAMPLE

** 端口号
BOOTP有两个熟知端口：
+ *67* : BOOTP服务器为
+ *68* BOOTP客户端

这意味着 *BOOTP客户不会选择未用的临时端口，而只用端口68* 

选择两个端口而不是仅选择一个端口为BOOTP服务器用的原因是，服务器的应答可以进行广播（但通常是不用广播的）：
+ 如果服务器的应答是通过广播传送的，同时客户又选择未用的临时端口，那么这些广播也能被其他的主机中碰巧使用相同临时端口的应用进程接收到。因此，采用随机端口（即临时端口）对广播来说是一个不好的选择
+ 如果客户也使用服务器的知名端口（67）作为它的端口，那么网络内的所有服务器会被唤醒来查看每个广播应答（如果所有的服务器都被唤醒，它们将检查操作码，如果是一个应答而不是请求，就不作处理）。因此可以让所有的客户使用与服务器知名端口不同的同一知名端口
+ 如果多个客户同时进行系统引导，并且服务器广播所有应答，这样每个客户都会收到其他客户的应答。客户可以通过BOOTP首部中的事务标识字段来确认应答是否与请求匹配，或者可以通过检查返回的客户硬件地址加以区分


** 实例
看一个用BOOTP引导一个X终端的例子。图16-3显示了tcpdump的输出结果（例中客户名为proteus，服务器名为mercury。这个tcpdump的输出是在不同的网络上获得的）：
  #+ATTR_HTML: image :width 70% 
  [[file:pic/bootp-dump.png]]

+ 第1行:客户发送请求
  + 客户请求来自0.0.0.0.68
  + 发送目的站：255.255.255.255.67
  + 秒数：设置为100
  + 客户硬件地址
  + 没有显示跳数和事务标识，因为它们均为0
    + 事务标识:0表示该客户忽略这个字段，因为如果打算对返回响应进行验证，它将把这个字段设置为一个随机数值

+ 第2行：服务器返回的应答
  + 该客户的IP地址：显示为名字proteus
  + 服务器的IP地址：显示为名字mercury
  + 网关的IP地址：显示为名字mercury
  + 引导文件名

+ 第3行:在收到BOOTP应答后，该客户立即发送一个ARP请求来了解网络中其他主机是否有IP地址：
  + who-has后的名字proteus对应目的IP地址
  + 发送者的IP地址被设置为0.0.0.0
+ 第4行：客户在0.5秒后再发一个相同的ARP请求
+ 第5行：再过0.5秒又发一个相同的ARP请求
  + 将发送者的IP地址改变为它自己的IP地址。这是一个没有意义的ARP请求

+ 第6行：该客户在等待另一个0.5秒后，广播另一个BOOTP请求
  + 这个请求与第1行的唯一不同是此时客户将它的IP地址写入IP首部中
+ 第7行：客户收到来自同一个服务器的相同应答
+ 第8行：该客户在等待2秒后，又广播一个BOOTP请求
+ 第9行：同样收到来自同一服务器的相同应答

+ 第10行：该客户等待2秒后，向它的服务器mercury发送一个ARP请求
+ 第11行：收到服务器发回的ARP应答
+ 第12行：客户立即发送一个TFTP读请求，请求读取它的引导文件
  + 文件传送过程包括2464个TFTP数据分组和确认，传送的数据量为512×2463+224=1261280字节。这将操作系统调入X终端

当和图15-2比较TFTP的数据交换过程时，要注意:这儿的客户在整个传输过程中使用TFTP的知名端口（69）。既然通信双方中的一方使用了端口69，tcpdump就知道这些分组是TFTP报文，因此它能用TFTP协议来解释每个分组。这就是为什么图16-3能指明哪些包含有数据，哪些包含有确认，以及每个分组的块编号。在图15-2中我们并不能获得这些额外的信息，因为通信双方均没有使用TFTP的知名端口进行数据传送。由于TFTP服务器作为一个多用户系统，且使用TFTP的知名端口，因此通常TFTP客户不能使用那个端口。 *但这里的系统处于正被引导的过程中，无法提供一个TFTP服务器，因此允许该客户在传输期间使用TFTP的知名端口* 。这也暗示在mercury上的TFTP服务器并不关心客户的端口号是什么: *它只将数据传送到客户的端口上，而不管发生了什么*

可以看出在9秒内共传送了1261280字节。数据速率大约为140000 bps。这比大多数以FTP文件传送形式访问一个以太网要慢，但对于一个简单的停止等待协议如TFTP来说已经很好了

X终端系统引导后，还需使用TFTP传送终端的字体文件、某些DNS名字服务器查询，然后进行X协议的初始化。图16-3中的所有步骤大概需要15秒钟，其余的步骤需要6秒钟，这样无盘X终端系统引导的总时间是21秒

* BOOTP服务器的设计
