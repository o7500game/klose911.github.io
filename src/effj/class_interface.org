#+TITLE: 类和接口
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: common_method.html   
#+HTML_LINK_HOME: effj.html
#+OPTIONS: num:nil timestamp:nil
* 使可见性最低
** 信息隐藏
设计良好的模块会隐藏所有的实现细节，把接口和实现清晰的分离开来。模块之间通过它们之间的接口进行调用，一个模块不需要知道其他模块的内部情况
+ 有效的解除系统组成各模块之间的耦合，各个模块可以独立的开发、测试、优化、使用、理解和修改
+ 加快系统开发的速度，各个模块可以并发开发
+ 减轻了维护的负担，因为可以更快的理解代码，并且在调试不影响其他的模块
+ 虽然信息隐藏本身无论是对内还是对外，都不会带来更好的性能，但是可以有效的方便优化性能：一旦完成一个系统，并通过剖析哪些模块影响了系统性能，那些模块可以进一步优化，而不影响到其他模块的正确性
+ 信息隐藏提高了可重用性，因为模块之间并不紧密相连，除了开发这些模块所使用的坏境之外，这些模块在其他坏境中往往也可用
+ 信息隐藏降低了构建大型系统的风险，因为即使整个系统不可用，但是这些独立的模块却有可能是可用的
** 封装规则
+ 实例成员绝不能是public，包含public可变成员的类不是线程安全的
+ public静态的final数组成员几乎总是错误的
+ 使共有数组变成私有的，并返回一个公有的不可变List
  #+BEGIN_SRC java
    private static final Thing[] PRIVATE_VALUES = {...};
    public static final List<Thing> VALUES =
            Collecations.unmodifiableList(Arrays.asList(PRIVATE_VALUES));
    //或者
    private static final Thing[] PRIVATE_VALUES = {...};
    public static final Thing[] values() {
            return PRIVATE_VALUES.clone;
    }
  #+END_SRC
+ 如果类可以在它所在的包的外部被访问，就提供访问私有成员的方法
+ 如果类是包私有的，或者私有的嵌套类，直接暴露他的数据成员并没有本质的错误

* 使可变性最小
** 不可变类的规则
1. 不要提供任何会修改对象状态的方法
2. 保证类不会被扩展
3. 使所有的成员都是final的
4. 使所有的成员都成为私有的
5. 确保对于任何可变组件的互斥访问
** 不可变类的优点
+ 不可变对象本质上是线程安全的，不要求同步
+ 不可变对象可以自由地共享
+ 永远也不需要进行保护性拷贝
+ 不仅可以共享不可变对象，甚至也可以共享他们的内部信息
+ 不可变对象对其他对象提供了大量的构件（building blocks）
** 不可变类的缺点
每一个值都需要一个单独的对象
** 不可变类的诀窍
+ 让类的所有构造器都变成私有的或者包级私有的，并添加共有的静态工厂（static factory）来替代共有构造器
+ 除非有很好的理由要让类成为可变的类，否则就应该是不可变的
+ 如果类不能做成不可变的，但也应该尽量限制他的可变性
+ 除非有令人信服的理由要使域变成是非final的，否则要使每个域都是final的
+ 构造器应该创建完全初始化的对象，并建立起所有的约束关系。不要在构造器或者静态工厂之外再提供共有的初始化方法
* 组合优先于继承
