#+TITLE: 内置的ChannelHandler 和 Codecs
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: codecs.html   
#+HTML_LINK_HOME: netty.html
#+OPTIONS: num:nil timestamp:nil  ^:nil

本章介绍：
+ 使用 SSL/TLS 加密 Netty 程序
+ 构建 Netty HTTP/HTTPS 程序
+ 处理空闲连接和超时
+ 解码分隔符和基于长度的协议
+ 写大数据
+ 序列化数据
  
Netty 提供了很多共同协议的编解码器和处理程序,几乎可以”开箱即用“的使用他们，而无需花在相当乏味的基础设施问题。在这一章里，将探索这些工具和他们的好处。这包括支持 SSL/TLS, WebSocket 和 谷歌SPDY，通过数据压缩使 HTTP 有更好的性能

* 使用 SSL/TLS 加密 Netty 程序
  今天数据隐私是一个十分关注的问题，作为开发人员需要准备好解决这个问题。至少需要熟悉加密协议 SSL 和 TLS 等之上的其他协议实现数据安全。作为一个 HTTPS 网站的用户显然更安全。当然这些协议是广泛不基于 http 的应用程序，例如安全SMTP(SMTPS)邮件服务，甚至关系数据库系统
  
** SslHandler
   为了支持 SSL/TLS，Java 提供了 javax.net.ssl API 的类SslContext 和 SslEngine 使它相对简单的实现解密和加密。Netty 的利用该 API 命名 *SslHandler* 的 ChannelHandler 实现，有一个内部 *SslEngine* 做实际的工作
   
   图8.1显示了一个使用 SslHandler 数据流图：
   
   #+ATTR_HTML: image :width 70% 
   [[file:pic/ssl-handler.jpg]]
   
1. 加密的入站数据被 SslHandler 拦截，并被解密
2. 前面加密的数据被 SslHandler 解密
3. 平常数据传过 SslHandler
4. SslHandler 加密数据并它传递出站
   
*** 实例
    
    #+BEGIN_SRC java
      public class SslChannelInitializer extends ChannelInitializer<Channel> {

              private final SslContext context;
              private final boolean startTls;
              public SslChannelInitializer(SslContext context,
                                           boolean client, boolean startTls) {   //1 使用构造函数来传递 SSLContext ，startTls 是否启用
                      this.context = context;
                      this.startTls = startTls;
              }
              @Override
              protected void initChannel(Channel ch) throws Exception {
                      SSLEngine engine = context.newEngine(ch.alloc());  //2 从 SslContext 获得一个新的 SslEngine 。给每个 SslHandler 实例使用一个新的 SslEngine
                      engine.setUseClientMode(client); //3 设置 SslEngine 是 client 或者是 server 模式
                      ch.pipeline().addFirst("ssl", new SslHandler(engine, startTls));  //4 添加 SslHandler 到 pipeline 作为第一个处理器
              }
      }
    #+END_SRC
    
    在大多数情况下,SslHandler 将成为 ChannelPipeline 中的第一个 ChannelHandler 。这将确保所有其他 ChannelHandler 应用他们的逻辑到数据后加密后才发生，从而确保他们的变化是安全的
*** 方法
    SslHandler 有很多有用的方法，如表8.1所示。例如，在握手阶段两端相互验证，商定一个加密方法。您可以配置 SslHandler 修改其行为或提供 在SSL/TLS 握手完成后发送通知，这样所有数据都将被加密：
    
    #+CAPTION: SslHandler 方法
    #+ATTR_HTML: :border 1 :frame boader  :rules all 
    | 名称                                                                                      | 描述                                                                                                                                                                                             |
    | setHandshakeTimeout(...) setHandshakeTimeoutMillis(...) getHandshakeTimeoutMillis()       | Set and get the timeout, after which the handshake ChannelFuture is notified of failure                                                                                                          |
    | setCloseNotifyTimeout(...) setCloseNotifyTimeoutMillis(...) getCloseNotifyTimeoutMillis() | Set and get the timeout after which the close notify will time out and the connection will close. This also results in having the close notify ChannelFuture fail                                |
    | handshakeFuture()                                                                         | Returns a ChannelFuture that will be notified once the handshake is complete. If the handshake was done before it will return a ChannelFuture that contains the result of the previous handshake |
    | close(...)                                                                                | Send the close_notify to request close and destroy the underlying SslEngine                                                                                                                      |
* 构建 Netty HTTP/HTTPS 应用
HTTP/HTTPS 是最常见的一种协议，在智能手机里广泛应用。虽然每家公司都有一个主页，您可以通过HTTP或HTTPS访问。这不是它唯一的使用。许多组织通过 HTTP(S) 公开 WebService API ，旨在用于缓解独立的平台带来的弊端 。让我们看一下 Netty 提供的 ChannelHandler，是如何允许您使用 HTTP 和 HTTPS 而无需编写自己的编解码器

** Http应用
*** Codec
HTTP 是请求-响应模式，客户端发送一个 HTTP 请求，服务就响应此请求。Netty 提供了简单的编码、解码器来简化基于这个协议的开发工作。图8.2显示 HTTP 请求是如何消费的：

   #+ATTR_HTML: image :width 70% 
   [[file:pic/http-request.jpg]]

1. HTTP Request 第一部分是包含的头信息
2. HttpContent 里面包含的是数据，可以后续有多个 HttpContent 部分
3. LastHttpContent 标记是 HTTP request 的结束，同时可能包含头的尾部信息
4. 完整的 HTTP request

图8.3显示 HTTP 响应的是如何生产的：
   #+ATTR_HTML: image :width 70% 
   [[file:pic/http-response.jpg]]

1. HTTP response 第一部分是包含的头信息
2. HttpContent 里面包含的是数据，可以后续有多个 HttpContent 部分
3. LastHttpContent 标记是 HTTP response 的结束，同时可能包含头的尾部信息
4. 完整的 HTTP response

如图8.2和8.3所示的 *HTTP 请求/响应可能包含不止一个数据部分，它总是终止于 LastHttpContent 部分* 。FullHttpRequest 和 FullHttpResponse 消息是特殊子类型，分别表示一个完整的请求和响应。所有类型的 HTTP 消息(FullHttpRequest ，LastHttpContent )实现 HttpObject 接口：

    #+CAPTION: Http decoder and encoder
    #+ATTR_HTML: :border 1 :frame boader  :rules all 
    | 名称                | 描述                                                                      |
    | HttpRequestEncoder  | Encodes HttpRequest , HttpContent and LastHttpContent messages to bytes   |
    | HttpResponseEncoder | Encodes HttpResponse, HttpContent and LastHttpContent messages to bytes   |
    | HttpRequestDecoder  | Decodes bytes into HttpRequest, HttpContent and LastHttpContent messages  |
    | HttpResponseDecoder | Decodes bytes into HttpResponse, HttpContent and LastHttpContent messages |
**** 支持Http协议
只要添加正确的 ChannelHandler 到 ChannelPipeline 中就可以支持http协议
     #+BEGIN_SRC java
       public class HttpPipelineInitializer extends ChannelInitializer<Channel> {
               private final boolean client;

               public HttpPipelineInitializer(boolean client) {
                       this.client = client;
               }

               @Override
               protected void initChannel(Channel ch) throws Exception {
                       ChannelPipeline pipeline = ch.pipeline();
                       if (client) {
                               pipeline.addLast("decoder", new HttpResponseDecoder());  //1 client: 添加 HttpResponseDecoder 用于处理来自 server 响应
                               pipeline.addLast("encoder", new HttpRequestEncoder());  //2 client: 添加 HttpRequestEncoder 用于发送请求到 server
                       } else {
                               pipeline.addLast("decoder", new HttpRequestDecoder());  //3 server: 添加 HttpRequestDecoder 用于接收来自 client 的请求
                               pipeline.addLast("encoder", new HttpResponseEncoder());  //4 server: 添加 HttpResponseEncoder 用来发送响应给 client
                       }
               }
       }
     #+END_SRC

*** 消息聚合
安装 ChannelPipeline 中的初始化之后，能够对不同 HttpObject 消息进行操作。但由于 HTTP 请求和响应可以由许多部分组合而成，需要聚合他们形成完整的消息。为了消除这种繁琐任务， Netty 提供了一个聚合器，合并消息部件到 FullHttpRequest 和 FullHttpResponse 消息。这样总是能够看到完整的消息内容

#+BEGIN_EXAMPLE
  这个操作有一个轻微的成本：消息段需要缓冲，直到完全可以将消息转发到下一个 ChannelInboundHandler 管道

  但好处是：不必担心消息碎片
#+END_EXAMPLE

实现自动聚合只需添加另一个 ChannelHandler 到 ChannelPipeline。下面显示了这是如何实现的：


#+BEGIN_SRC java
  public class HttpAggregatorInitializer extends ChannelInitializer<Channel> {
          private final boolean client;

          public HttpAggregatorInitializer(boolean client) {
                  this.client = client;
          }

          @Override
          protected void initChannel(Channel ch) throws Exception {
                  ChannelPipeline pipeline = ch.pipeline();
                  if (client) {
                          pipeline.addLast("codec", new HttpClientCodec());  //1 client: 添加 HttpClientCodec
                  } else {
                          pipeline.addLast("codec", new HttpServerCodec());  //2 server: 添加 HttpServerCodec 
                  }
                  pipeline.addLast("aggegator", new HttpObjectAggregator(512 * 1024));  //3 添加 HttpObjectAggregator 到 ChannelPipeline, 使用最大消息值是 512kb
          }
  }
#+END_SRC

*** 压缩
使用 HTTP 时建议压缩数据以减少传输流量，压缩数据会增加 CPU 负载，现在的硬件设施都很强大，大多数时候压缩数据时一个好主意。Netty 支持 *gzip* 和 *deflate* ，为此提供了两个 ChannelHandler 实现分别用于压缩和解压

**** HTTP Request Header 

     #+BEGIN_SRC html
       GET /encrypted-area HTTP/1.1
       Host: www.example.com
       Accept-Encoding: gzip, deflate
     #+END_SRC


     #+BEGIN_SRC java
       public class HttpAggregatorInitializer extends ChannelInitializer<Channel> {
               private final boolean isClient;

               public HttpAggregatorInitializer(boolean isClient) {
                       this.isClient = isClient;
               }

               @Override
               protected void initChannel(Channel ch) throws Exception {
                       ChannelPipeline pipeline = ch.pipeline();
                       if (isClient) {
                               pipeline.addLast("codec", new HttpClientCodec()); //1 client: 添加 HttpClientCodec
                               pipeline.addLast("decompressor",new HttpContentDecompressor()); //2 client: 添加 HttpContentDecompressor 用于处理来自服务器的压缩的内容
                       } else {
                               pipeline.addLast("codec", new HttpServerCodec()); //3 server: HttpServerCodec
                               pipeline.addLast("compressor",new HttpContentCompressor()); //4 server: HttpContentCompressor 用于压缩来自 client 支持的 HttpContentCompressor
                       }
               }
       }
     #+END_SRC

** 使用 HTTPS
启用 HTTPS，只需添加 SslHandler 

#+BEGIN_SRC java
  public class HttpsCodecInitializer extends ChannelInitializer<Channel> {
          private final SslContext context;
          private final boolean client;

          public HttpsCodecInitializer(SslContext context, boolean client) {
                  this.context = context;
                  this.client = client;
          }

          @Override
          protected void initChannel(Channel ch) throws Exception {
                  ChannelPipeline pipeline = ch.pipeline();
                  SSLEngine engine = context.newEngine(ch.alloc());
                  pipeline.addFirst("ssl", new SslHandler(engine));  //1 添加 SslHandler 到 pipeline 来启用 HTTPS

                  if (client) {
                          pipeline.addLast("codec", new HttpClientCodec());  //2 client: 添加 HttpClientCodec
                  } else {
                          pipeline.addLast("codec", new HttpServerCodec());  //3 server: 添加 HttpServerCodec 
                  }
          }
  }
#+END_SRC

** WebSocket

*** 协议
Http 是不错的协议，但是如果需要实时发布信息怎么做？有个做法就是客户端一直轮询请求服务器，这种方式虽然可以达到目的，但是其缺点很多，也不是优秀的解决方案，为了解决这个问题，便出现了 WebSocket

WebSocket 允许数据双向传输，而不需要请求-响应模式。早期的WebSocket 只能发送文本数据，然后现在不仅可以发送文本数据，也可以发送二进制数据，这使得可以使用 WebSocket 构建你想要的程序

WebSocket 规范及其实现是为了一个更有效的解决方案。简单的说, 一个WebSocket 提供一个 TCP 连接两个方向的交通。结合 WebSocket API 它提供了一个替代 HTTP 轮询双向通信从页面到远程服务器

WebSocket 提供真正的双向客户机和服务器之间的数据交换。 虽然最早实现仅限于文本数据，但现在不再是这样，WebSocket可以用于任意数据,就像一个正常的套接字

图8.4给出了一个通用的 WebSocket 协议，在这种情况下的通信开始于普通 HTTP ，并 *升级* 为双向 WebSocket：

   #+ATTR_HTML: image :width 70% 
   [[file:pic/websocket-protocol.jpg]]


1. Client (HTTP) 与 Server 通讯
2. Server (HTTP) 与 Client 通讯
3. Client 通过 HTTP(s) 来进行 WebSocket 握手，并等待确认
4. 连接协议升级至 WebSocket

*** WebSocketFrame
添加应用程序支持 WebSocket，只需要 *添加适当的客户端或服务器端WebSocket ChannelHandler 到管道* 。这个类将处理特殊 WebSocket 定义的消息类型，称为 *帧* (Frame)。如表8.3所示，这些可以归类为 *数据* 和 *控制* 帧：

    #+CAPTION:  WebSocketFrame类型
    #+ATTR_HTML: :border 1 :frame boader  :rules all 
| 名称                       | 描述                                                                                                |
| BinaryWebSocketFrame       | Data frame: binary data                                                                               |
| TextWebSocketFrame         | Data frame: text data                                                                                 |
| ContinuationWebSocketFrame | Data frame: text or binary data that belongs to a previous BinaryWebSocketFrame or TextWebSocketFrame |
| CloseWebSocketFrame        | Control frame: a CLOSE request, close status code and a phrase                                        |
| PingWebSocketFrame         | Control frame: requests the send of a PongWebSocketFrame                                              |
| PongWebSocketFrame         | Control frame: sent as response to a PingWebSocketFrame                                               |

**** WebSocketServerProtocolHandler 
由于 Netty 的主要是一个服务器端技术重点在这里创建一个 WebSocket server 。下面使用 WebSocketServerProtocolHandler 提出了一个简单的例子。该类处理协议升级握手以及三个 *控制帧* Close, Ping 和 Pong。Text 和 Binary 数据帧将被传递到下一个处理程序进行处理：


#+BEGIN_SRC java
  public class WebSocketServerInitializer extends ChannelInitializer<Channel> {
          @Override
          protected void initChannel(Channel ch) throws Exception {
                  ch.pipeline().addLast(
                          new HttpServerCodec(),
                          new HttpObjectAggregator(65536),  //1 添加 HttpObjectAggregator 用于提供在握手时聚合 HttpRequest
                          new WebSocketServerProtocolHandler("/websocket"),  //2 添加 WebSocketServerProtocolHandler 用于处理好握手请求。请求是发送到"/websocket." 端点，当升级完成后，它将会处理Ping, Pong 和 Close 帧
                          new TextFrameHandler(),  //3 TextFrameHandler 将会处理 TextWebSocketFrames
                          new BinaryFrameHandler(),  //4 BinaryFrameHandler 将会处理 BinaryWebSocketFrames
                          new ContinuationFrameHandler());  //5 ContinuationFrameHandler 将会处理ContinuationWebSocketFrames
          }

          public static final class TextFrameHandler extends SimpleChannelInboundHandler<TextWebSocketFrame> {
                  @Override
                  public void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {
                          // Handle text frame
                  }
          }

          public static final class BinaryFrameHandler extends SimpleChannelInboundHandler<BinaryWebSocketFrame> {
                  @Override
                  public void channelRead0(ChannelHandlerContext ctx, BinaryWebSocketFrame msg) throws Exception {
                          // Handle binary frame
                  }
          }

          public static final class ContinuationFrameHandler extends SimpleChannelInboundHandler<ContinuationWebSocketFrame> {
                  @Override
                  public void channelRead0(ChannelHandlerContext ctx, ContinuationWebSocketFrame msg) throws Exception {
                          // Handle continuation frame
                  }
          }
  }
#+END_SRC

加密 WebSocket 只需插入 SslHandler 到作为 pipline 第一个 ChannelHandler
** SPDY
SPDY 是Google 开发的基于 TCP 的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。SPDY 并不是一种用于替代 HTTP 的协议，而是对 HTTP 协议的增强。SPDY 实现技术：
+ 压缩报头
+ 加密所有
+ 多路复用连接
+ 提供支持不同的传输优先级

SPDY 主要有5个版本：
 + 1: 初始化版本，但没有使用
 + 2: 新特性，包含服务器推送
 + 3: 新特性包含流控制和更新压缩
 + 3.1: 会话层流程控制
 + 4.0: 流量控制，并与 HTTP 2.0 更加集成

Netty 支持 版本 2 和 3 （包含3.1）的支持。这些版本被广泛应用，可以支持更多的用户

* 空闲连接以及超时
